{"title":"Reflect 对象解析","slug":"Reflect对象解析","date":"2022-02-12","updated":"2022-02-12","comments":true,"path":"api/posts/60673.json","excerpt":"<p></p>","cover":"/gallery/js-2022-2-16.jpeg","covers":["/gallery/js-2022-2-16.jpeg"],"content":"<p><img src=\"/gallery/js-2022-2-16.jpeg\" alt=\"\"></p><a id=\"more\"></a><h1 id=\"Reflect\"><a class=\"headerlink\"href=\"#Reflect\"></a>Reflect</h1><p>Reflect 是一个内置对象，其原型是 Object.prototype。它不是一个函数，不能执行函数的调用和构造函数调用。</p><p>Reflect 对象的设计目的主要有：</p><p>1、将 Object 对象的一些明显属于语言层面的方法放到了 Reflect 对象上。</p><p>2、修改某些 Object 方法的返回结果，使其根据合理。</p><p>3、让对象操作都变成函数行为。</p><p>4、Reflect 对象的方法和 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，都能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便的调用对应的 Reflect 方法完成默认行为。</p><h1 id=\" 静态方法 \"><a class=\"headerlink\"href=\"# 静态方法 \"></a>静态方法 </h1><h2 id=\"1、Reflect-apply-target-thisArgument-argumentsList\"><a class=\"headerlink\"href=\"#1、Reflect-apply-target-thisArgument-argumentsList\"></a>1、Reflect.apply(target, thisArgument, argumentsList)</h2><p> 等同于 Function.prototype.apply.call(target, thisArgument, argumentsList)。一般来说，如果要绑定一个函数的 this 对象，可以写成 fn.apply(obj, args)。但如果函数自己定义了 apply 方法，就只能写成 Function.prototype.apply.call(fn, obj, args)。而采用 Reflect 对象可以简化这种操作。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.apply(test, obj, [<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure><p>没有 <strong>Reflect.call</strong>()</p><h2 id=\"2、Reflect-construct-target-argumentList\"><a class=\"headerlink\"href=\"#2、Reflect-construct-target-argumentList\"></a>2、Reflect.construct(target, argumentList)</h2><p> 这里提供了一种不使用 new 来调用构造函数的方法。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// [1,2,3] </span></span><br><span class=\"line\"><span class=\"comment\">// 等价于 </span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.construct(<span class=\"built_in\">Array</span>, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]); <span class=\"comment\">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id=\"3、Reflect-defineProperty-target-propertyKey-attributes\"><a class=\"headerlink\"href=\"#3、Reflect-defineProperty-target-propertyKey-attributes\"></a>3、Reflect.defineProperty (target, propertyKey, attributes)</h2><p> 用于定义或修改对象属性，返回一个布尔值表示是否操作成功。其对应的 Object 方法如果操作失败的话，会抛出异常。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'a'</span>); </span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 现在将其修改为不可配置 </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;<span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 再将其改回可配置</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;<span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot redefine property</span></span><br><span class=\"line\"><span class=\"comment\">// 如果使用 Reflect.defineProperty 将返回一个布尔值，而不是抛出异常。</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty(obj, <span class=\"string\">'a'</span>, &#123;<span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>&#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure><h2 id=\"4、Reflect-deleteProperty-target-propertyKey\"><a class=\"headerlink\"href=\"#4、Reflect-deleteProperty-target-propertyKey\"></a>4、Reflect.deleteProperty(target, propertyKey)</h2><p> 该方法主要是将 Object 操作变成函数行为。等同于 delete obj[name];</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty(obj, <span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.a; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure><h2 id=\"5、Reflect-get-target-propertyKey-receiver\"><a class=\"headerlink\"href=\"#5、Reflect-get-target-propertyKey-receiver\"></a>5、Reflect.get (target, propertyKey [ , receiver] )</h2><p>查找并返回 target 对象的 propertyKey 属性。如果没有该属性，则返回 undefined。如果 propertyKey 属性部署了读取函数，则读取函数的 this 绑定到 receiver。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> foo() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bar(); &#125;,</span><br><span class=\"line\">    bar() &#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'foo'</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = &#123; bar() &#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'foo'</span>, wrapper); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><h2 id=\"6、Reflect-getOwnPropertyDescriptor-target-propertyKey\"><a class=\"headerlink\"href=\"#6、Reflect-getOwnPropertyDescriptor-target-propertyKey\"></a>6、Reflect.getOwnPropertyDescriptor (target, propertyKey)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id=\"7、Reflect-getPrototypeOf-target\"><a class=\"headerlink\"href=\"#7、Reflect-getPrototypeOf-target\"></a>7、Reflect.getPrototypeOf (target)</h2><p>获取对象的原型。相当于 Object.getPrototypeOf(target);</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(obj) === <span class=\"built_in\">Object</span>.prototype;  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.getPrototypeOf(obj) === <span class=\"built_in\">Object</span>.prototype; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><h2 id=\"8、Reflect-has-target-propertyKey\"><a class=\"headerlink\"href=\"#8、Reflect-has-target-propertyKey\"></a>8、Reflect.has (target, propertyKey)</h2><p>相当于 propertyKey in target，将该操作变成函数行为。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"string\">'a'</span> <span class=\"keyword\">in</span> obj; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(obj, <span class=\"string\">'a'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><h2 id=\"9、Reflect-isExtensible-target\"><a class=\"headerlink\"href=\"#9、Reflect-isExtensible-target\"></a>9、Reflect.isExtensible (target)</h2><p>等同于 Object.isExtensible (target)，判断对象是不是可拓展的 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.isExtensible(obj);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.isExtensible(obj); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><h2 id=\"10、Reflect-ownKeys-target\"><a class=\"headerlink\"href=\"#10、Reflect-ownKeys-target\"></a>10、Reflect.ownKeys (target)</h2><p> 等同于 Object.getOwnPropertyNames(target)和 Object.getOwnPropertySymbols(target)的返回值组合。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">obj[<span class=\"built_in\">Symbol</span>(<span class=\"string\">'b'</span>)] = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(obj); <span class=\"comment\">// ['a'];</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj); <span class=\"comment\">// [Symbol(b)]</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(obj); <span class=\"comment\">// [\"a\", Symbol(b)]</span></span><br></pre></td></tr></table></figure><p><strong>与 Object.keys()的区别 </strong></p><p>Object.keys() 返回属性 key, 但不包括不可枚举的属性 </p><p>Reflect.ownKeys() 返回所有属性的 key</p><h2 id=\"11、Reflect-preventExtensions-target\"><a class=\"headerlink\"href=\"#11、Reflect-preventExtensions-target\"></a>11、Reflect.preventExtensions (target)</h2><p>禁止对象扩展，相当于 Object.preventExtensions (target)</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.preventExtensions (obj);</span><br><span class=\"line\">obj.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj.b; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure><h2 id=\"12、Reflect-set-target-propertyKey-V-receiver\"><a class=\"headerlink\"href=\"#12、Reflect-set-target-propertyKey-V-receiver\"></a>12、Reflect.set (target, propertyKey, V [ , receiver] )</h2><p>设置 target 对象 propertyKey 属性的值等于 V。如果 propertyKey 属性设置了赋值函数，则赋值函数的 this 绑定到 receiver 上。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'a'</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">obj.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> foo(a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapper = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.set(target, <span class=\"string\">'foo'</span>, <span class=\"number\">4</span>, wrapper);</span><br><span class=\"line\">wrapper.a; <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure><h2 id=\"13、Reflect-setPrototypeOf-target-proto\"><a class=\"headerlink\"href=\"#13、Reflect-setPrototypeOf-target-proto\"></a>13、Reflect.setPrototypeOf (target, proto)</h2><p>将 target 的原型对象设置为 proto，等同于 Object.setPropertyOf 方法。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.setPrototypeOf(array, <span class=\"built_in\">Array</span>.prototype);</span><br><span class=\"line\">array.length; <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>","url":"/posts/60673/","min2read":4,"word4post":953,"prev_post":{"title":"常见的功能函数","url":"/posts/19005/"},"next_post":{"title":"传统 diff 与 diff 优化","url":"/posts/49936/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"Reflect\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Reflect</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 静态方法 \" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">静态方法 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"1、Reflect-apply-target-thisArgument-argumentsList\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">1、Reflect.apply(target, thisArgument, argumentsList)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"2、Reflect-construct-target-argumentList\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">2、Reflect.construct(target, argumentList)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"3、Reflect-defineProperty-target-propertyKey-attributes\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">3、Reflect.defineProperty (target, propertyKey, attributes)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"4、Reflect-deleteProperty-target-propertyKey\" href = \"#\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">4、Reflect.deleteProperty(target, propertyKey)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"5、Reflect-get-target-propertyKey-receiver\" href = \"#\"><span class=\"toc-number\">2.5.</span> <span class=\"toc-text\">5、Reflect.get (target, propertyKey [ , receiver] )</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"6、Reflect-getOwnPropertyDescriptor-target-propertyKey\" href = \"#\"><span class=\"toc-number\">2.6.</span> <span class=\"toc-text\">6、Reflect.getOwnPropertyDescriptor (target, propertyKey)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"7、Reflect-getPrototypeOf-target\" href = \"#\"><span class=\"toc-number\">2.7.</span> <span class=\"toc-text\">7、Reflect.getPrototypeOf (target)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"8、Reflect-has-target-propertyKey\" href = \"#\"><span class=\"toc-number\">2.8.</span> <span class=\"toc-text\">8、Reflect.has (target, propertyKey)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"9、Reflect-isExtensible-target\" href = \"#\"><span class=\"toc-number\">2.9.</span> <span class=\"toc-text\">9、Reflect.isExtensible (target)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"10、Reflect-ownKeys-target\" href = \"#\"><span class=\"toc-number\">2.10.</span> <span class=\"toc-text\">10、Reflect.ownKeys (target)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"11、Reflect-preventExtensions-target\" href = \"#\"><span class=\"toc-number\">2.11.</span> <span class=\"toc-text\">11、Reflect.preventExtensions (target)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"12、Reflect-set-target-propertyKey-V-receiver\" href = \"#\"><span class=\"toc-number\">2.12.</span> <span class=\"toc-text\">12、Reflect.set (target, propertyKey, V [ , receiver] )</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"13、Reflect-setPrototypeOf-target-proto\" href = \"#\"><span class=\"toc-number\">2.13.</span> <span class=\"toc-text\">13、Reflect.setPrototypeOf (target, proto)</span></a></li></ol></li></ol>","categories":[],"tags":[]}