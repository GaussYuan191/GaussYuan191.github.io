{"title":"leetcode 刷题","slug":"leetcode刷题","date":"2021-09-10","updated":"2022-01-02","comments":true,"path":"api/posts/35458.json","excerpt":"<p> 本篇博客记录每天刷题的记录，每天更新 (已更新第十天)。</p>","cover":"/gallery/Xnip2021-11-21_21-50-56.jpg","covers":["/gallery/Xnip2021-11-21_21-50-56.jpg"],"content":"<p>本篇博客记录每天刷题的记录，每天更新 (已更新第十天)。</p><a id=\"more\"></a><h2 id=\"第一天\"><a class=\"headerlink\" href=\"# 第一天\"></a> 第一天 </h2><h4 id=\"合并两个有序数组\"><a class=\"headerlink\" href=\"# 合并两个有序数组\"></a><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 合并两个有序数组 </a></h4><p> 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p><p><strong>示例：</strong></p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class=\"line\">输出：[1,2,2,3,5,6]</span><br><span class=\"line\">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class=\"line\">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br><span class=\"line\">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class=\"line\">输出：[1]</span><br><span class=\"line\">解释：需要合并 [1] 和 [] 。</span><br><span class=\"line\">合并结果是 [1] 。</span><br><span class=\"line\">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class=\"line\">输出：[1]</span><br><span class=\"line\">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class=\"line\">合并结果是 [1] 。</span><br><span class=\"line\">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p><strong>暴力解法 </strong></p><p> 想法很简单直接比较 nums1 nums2，小的插到大的前面，然后把最后的元素抛出 (因为最后的元素都是 0) 如果 nums1 遍历完了就直接把 nums2 插入就行。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m + n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            nums1.splice(i, <span class=\"number\">0</span>, nums2[j]);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            nums1.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i - j &gt;= m) &#123;</span><br><span class=\"line\">            nums1.splice(i, <span class=\"number\">0</span>, nums2[j]);</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            nums1.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>暴击法 2</strong></p><p>直接从后开始比较，大的插到最后，直到 nums2 插完。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> end = m + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            nums1[end] = nums1[i];</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nums1[end] = nums2[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"第二天\"><a class=\"headerlink\" href=\"# 第二天\"></a>第二天 </h2><h4 id=\"买卖股票的最佳时机\"><a class=\"headerlink\" href=\"# 买卖股票的最佳时机\"></a><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 买卖股票的最佳时机 </a></h4><p> 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出：<span class=\"number\">5</span></span><br><span class=\"line\">解释：在第 <span class=\"number\">2</span> 天（股票价格 = <span class=\"number\">1</span>）的时候买入，在第 <span class=\"number\">5</span> 天（股票价格 = <span class=\"number\">6</span>）的时候卖出，最大利润 = <span class=\"number\">6</span><span class=\"number\">-1</span> = <span class=\"number\">5</span> 。</span><br><span class=\"line\">     注意利润不能是 <span class=\"number\">7</span><span class=\"number\">-1</span> = <span class=\"number\">6</span>, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>暴力法 </strong></p><p> 找一个最小值，然后每个值与最小值相减取最大值 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> len = prices.length;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> min = prices[<span class=\"number\">0</span>], max = <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">       max = <span class=\"built_in\">Math</span>.max(max, prices[i] - min);</span><br><span class=\"line\">       min = <span class=\"built_in\">Math</span>.min(min, prices[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong> 动态规划 </strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 易知每天有两种状态 </span><br><span class=\"line\">dp[i][<span class=\"number\">0</span>] 表示第 i 天持股能获得最多的利润</span><br><span class=\"line\">dp[i][<span class=\"number\">1</span>] 表示第 i 天不持股能获得最多的利润</span><br><span class=\"line\">i 天持股     i 天买入股份                         i - <span class=\"number\">1</span> 天持股 </span><br><span class=\"line\">           -prices[i]                        dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">i 天不持股   i 天卖股份                           i - <span class=\"number\">1</span> 天卖股份 </span><br><span class=\"line\">   i - <span class=\"number\">1</span>天持股 + prices[i]                    dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">取最大值，易知不持股的状态的利润大于持股的状态，即答案为 dp[len - <span class=\"number\">1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxProfit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prices</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill([<span class=\"number\">0</span>, <span class=\"number\">0</span>]);</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"built_in\">Math</span>.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>], -prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>] = <span class=\"built_in\">Math</span>.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + prices[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"第三天\"><a class=\"headerlink\" href=\"# 第三天\"></a>第三天 </h2><h4 id=\"字符串相加\"><a class=\"headerlink\" href=\"# 字符串相加\"></a><a href=\"https://leetcode-cn.com/problems/add-strings/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 字符串相加 </a></h4><p> 给定两个字符串形式的非负整数 num1 和 num2 ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num1 = <span class=\"string\">\"11\"</span>, num2 = <span class=\"string\">\"123\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"134\"</span></span><br><span class=\"line\">输入：num1 = <span class=\"string\">\"456\"</span>, num2 = <span class=\"string\">\"77\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"533\"</span></span><br><span class=\"line\">输入：num1 = <span class=\"string\">\"0\"</span>, num2 = <span class=\"string\">\"0\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"0\"</span></span><br></pre></td></tr></table></figure><p>暴力法 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每一位进行运行 最后判断是否有进位，然后把结果字符串反向就行了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">''</span>, ten = <span class=\"number\">0</span>, one = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = num1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = num2.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num2 == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 == <span class=\"string\">'0'</span> &amp;&amp; num2 == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val1 = num1[i] == <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : num1[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val2 = num2[j] == <span class=\"literal\">undefined</span> ? <span class=\"number\">0</span> : num2[j] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    one = (val1 + val2 + ten) % <span class=\"number\">10</span>;</span><br><span class=\"line\">    ans += one;</span><br><span class=\"line\">    ten = val1 + val2 + ten - <span class=\"number\">10</span> &gt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>; </span><br><span class=\"line\">    i--;</span><br><span class=\"line\">    j--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ten == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 可稍微优化下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addStrings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index1 = num1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index2 = num2.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> up = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index1 &gt;= <span class=\"number\">0</span> || index2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n1 = <span class=\"built_in\">parseInt</span>(index1 &gt;= <span class=\"number\">0</span> ? num1[index1] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n2 = <span class=\"built_in\">parseInt</span>(index2 &gt;= <span class=\"number\">0</span> ? num2[index2] : <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum = n1 + n2 + up;</span><br><span class=\"line\">        up = sum &gt;= <span class=\"number\">10</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        res.unshift(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">        index1--;</span><br><span class=\"line\">        index2--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最后判断一下进位是否为 1，为 1 则加入到 res</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(up === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        res.unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"第四天\"><a class=\"headerlink\" href=\"# 第四天\"></a> 第四天 </h2><h4 id=\"无重复字符的最长子串\"><a class=\"headerlink\" href=\"# 无重复字符的最长子串\"></a><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 无重复字符的最长子串 </a></h4><p> 给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串 </strong> 的长度。</p><p><strong> 示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = <span class=\"string\">\"abcabcbb\"</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span> </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">\"abc\"</span>，所以其长度为 <span class=\"number\">3</span>。</span><br><span class=\"line\">输入: s = <span class=\"string\">\"bbbbb\"</span></span><br><span class=\"line\">输出: <span class=\"number\">1</span></span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">\"b\"</span>，所以其长度为 <span class=\"number\">1</span>。</span><br><span class=\"line\">输入: s = <span class=\"string\">\"pwwkew\"</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">\"wke\"</span>，所以其长度为 <span class=\"number\">3</span>。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，<span class=\"string\">\"pwke\"</span> 是一个子序列，不是子串 </span><br><span class=\"line\"> 输入: s = <span class=\"string\">\"\"</span></span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><p>滑动窗口 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 维护一个数组 如果有重复的 就从重复的那里分隔字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxStr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = maxStr.indexOf(s[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      maxStr.push(s[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      maxStr = maxStr.splice(index + <span class=\"number\">1</span>);</span><br><span class=\"line\">      maxStr.push(s[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res = <span class=\"built_in\">Math</span>.max(res, maxStr.length);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>Map</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 map 维护最大字符串的下标的长度，最大长度为下标 +1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(),max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; j &lt; s.length; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.has(s[j])) &#123;</span><br><span class=\"line\">      i = <span class=\"built_in\">Math</span>.max(map.get(s[j]) + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max = <span class=\"built_in\">Math</span>.max(max, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    map.set(s[j], j);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 第五天 \"><a class=\"headerlink\"href=\"# 第五天 \"></a> 第五天 </h2><h4 id=\"165- 比较版本号 \"><a class=\"headerlink\"href=\"#165- 比较版本号 \"></a><a href=\"https://leetcode-cn.com/problems/compare-version-numbers/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">165. 比较版本号</a></h4><p> 给你两个版本号 version1 和 version2 ，请你比较它们。</p><p>版本号由一个或多个修订号组成，各修订号由一个 ‘.’ 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。</p><p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 &lt; 1 。</p><ul><li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li><li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li><li>除此之外返回 <code>0</code>。</li></ul><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：version1 = <span class=\"string\">\"1.01\"</span>, version2 = <span class=\"string\">\"1.001\"</span></span><br><span class=\"line\">输出：<span class=\"number\">0</span></span><br><span class=\"line\">解释：忽略前导零，<span class=\"string\">\"01\"</span> 和 <span class=\"string\">\"001\"</span> 都表示相同的整数 <span class=\"string\">\"1\"</span></span><br><span class=\"line\">输入：version1 = <span class=\"string\">\"0.1\"</span>, version2 = <span class=\"string\">\"1.1\"</span></span><br><span class=\"line\">输出：<span class=\"number\">-1</span></span><br><span class=\"line\">解释：version1 中下标为 <span class=\"number\">0</span> 的修订号是 <span class=\"string\">\"0\"</span>，version2 中下标为 <span class=\"number\">0</span> 的修订号是 <span class=\"string\">\"1\"</span> 。<span class=\"number\">0</span> &lt; <span class=\"number\">1</span>，所以 version1 &lt; version2</span><br><span class=\"line\">输入：version1 = <span class=\"string\">\"1.0.1\"</span>, version2 = <span class=\"string\">\"1\"</span></span><br><span class=\"line\">输出：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>split</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 split 把字符串分割，然后用 parseInt 比较大小 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compareVersion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">version1, version2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ver1 = version1.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ver2 = version2.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; ver1.length || j &lt; ver2.length) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (i &lt; ver1.length) &#123;</span><br><span class=\"line\">         ver1[i] = ver1[i++];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j &lt; ver2.length) &#123;</span><br><span class=\"line\">          ver2[j] = ver2[j++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(ver1[i]) &gt; <span class=\"built_in\">parseInt</span>(ver2[j])) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">parseInt</span>(ver1[i]) &lt; <span class=\"built_in\">parseInt</span>(ver2[j])) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p> 双指针 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双指针 碰到. 停止 比较一下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compareVersion = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">version1, version2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len1 = version1.length, len2 = version2.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len1 || j &lt; len2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num1 = <span class=\"number\">0</span>, num2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; len1 &amp;&amp; version1[i] != <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">            num1 += num1 * <span class=\"number\">10</span> + version1[i] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len2 &amp;&amp; version2[j] != <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">            num2 += num2 * <span class=\"number\">10</span> + version2[j] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num1 &gt; num2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num1 &lt; num2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 第六天 \"><a class=\"headerlink\"href=\"# 第六天 \"></a> 第六天 </h2><h4 id=\" 两数之和 \"><a class=\"headerlink\"href=\"# 两数之和 \"></a><a href=\"https://leetcode-cn.com/problems/two-sum/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 两数之和</a></h4><p> 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">15</span>], target = <span class=\"number\">9</span></span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">解释：因为 nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] == <span class=\"number\">9</span> ，返回 [<span class=\"number\">0</span>, <span class=\"number\">1</span>] 。</span><br><span class=\"line\">输入：nums = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>], target = <span class=\"number\">6</span></span><br><span class=\"line\">输出：[<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输入：nums = [<span class=\"number\">3</span>,<span class=\"number\">3</span>], target = <span class=\"number\">6</span></span><br><span class=\"line\">输出：[<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure><p>Map</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// map 存 nums[i], i 判断 target - nums[i] 在不在 map 中 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(target - nums[i]))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [map.get(target - nums[i]), i];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            map.set(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 第七天 \"><a class=\"headerlink\"href=\"# 第七天 \"></a> 第七天 </h2><h4 id=\" 最大子序和 \"><a class=\"headerlink\"href=\"# 最大子序和 \"></a><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 最大子序和 </a></h4><p> 给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">-2</span>,<span class=\"number\">1</span>,<span class=\"number\">-3</span>,<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-5</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出：<span class=\"number\">6</span></span><br><span class=\"line\">解释：连续子数组 [<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>] 的和最大，为 <span class=\"number\">6</span> 。</span><br><span class=\"line\">输入：nums = [<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">1</span></span><br><span class=\"line\">输入：nums = [<span class=\"number\">0</span>]</span><br><span class=\"line\">输出：<span class=\"number\">0</span></span><br></pre></td></tr></table></figure><p>动态规划 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dp[i] 表示包含 i 最大的子序列和 取最大值即为答案 </span></span><br><span class=\"line\"><span class=\"comment\">//dp[i] = max(dp[i - 1] + nums[i], nums[i])</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = nums[<span class=\"number\">0</span>], max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">    cnt = <span class=\"built_in\">Math</span>.max(cnt + nums[i],  nums[i]);</span><br><span class=\"line\">    max = <span class=\"built_in\">Math</span>.max(max, cnt);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p> 详细的过程：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/solution/dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://leetcode-cn.com/problems/maximum-subarray/solution/dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai/</a></p><p>贪心 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 贪心 如果这个序列 + nums[i] 大于 0 则继续相加 否则赋 0 更新最大值 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSubArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length, max = <span class=\"number\">0</span>, res = <span class=\"number\">-100005</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">     max += nums[i];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (max &gt; res) &#123;</span><br><span class=\"line\">        res = max;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (max &lt; <span class=\"number\">0</span>) max = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 第八天 \"><a class=\"headerlink\"href=\"# 第八天 \"></a> 第八天 </h2><h4 id=\" 全排列 \"><a class=\"headerlink\"href=\"# 全排列 \"></a><a href=\"https://leetcode-cn.com/problems/permutations/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 全排列 </a></h4><p> 给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列 </strong> 。你可以 <strong> 按任意顺序 </strong> 返回答案。</p><p><strong> 示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">输入：nums = [<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：[[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">输入：nums = [<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure><p>回溯法，如果对回溯法不了解的同学可以看下 </p><p><a href=\"https://programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://programmercarl.com/ 回溯算法理论基础.html# 其他语言版本</a></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> permute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [], path = [];</span><br><span class=\"line\">  backtracking(nums, nums.length, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backtracking</span>(<span class=\"params\">n, k, used</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置出口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length == k) &#123;</span><br><span class=\"line\">      res.push(<span class=\"built_in\">Array</span>.from(path));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 横向遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (used[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      path.push(n[i]);</span><br><span class=\"line\">      used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      backtracking(n, k, used);  <span class=\"comment\">// 纵向遍历</span></span><br><span class=\"line\">      path.pop();                <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">      used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\" 全排列 -II\"><a class=\"headerlink\"href=\"# 全排列 -II\"></a><a href=\"https://leetcode-cn.com/problems/permutations-ii/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 全排列 II</a></h4><p>给定一个可包含重复数字的序列 <code>nums</code> ，<strong>按任意顺序 </strong> 返回所有不重复的全排列。</p><p><strong> 示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>],[<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure><p>回溯 + 剪枝 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> permuteUnique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [], path = [];</span><br><span class=\"line\">    nums.sort();</span><br><span class=\"line\">    backtracking(nums, nums.length, []);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backtracking</span>(<span class=\"params\">n, k, used</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置出口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.length == k) &#123;</span><br><span class=\"line\">            res.push(<span class=\"built_in\">Array</span>.from(path));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// used[i - 1] = false 为树剪枝 used[i - 1] = true 为层剪枝</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == nums[i - <span class=\"number\">1</span>]&amp;&amp; used[i - <span class=\"number\">1</span>] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[i]) &#123;</span><br><span class=\"line\">                path.push(n[i]);</span><br><span class=\"line\">                used[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                backtracking(n, k, used);</span><br><span class=\"line\">                path.pop();</span><br><span class=\"line\">                used[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 第九天 \"><a class=\"headerlink\"href=\"# 第九天 \"></a> 第九天 </h2><p> 假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>** 注意：** 给定 <em>n</em> 是一个正整数。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： <span class=\"number\">2</span></span><br><span class=\"line\">输出： <span class=\"number\">2</span></span><br><span class=\"line\">解释： 有两种方法可以爬到楼顶。</span><br><span class=\"line\"><span class=\"number\">1.</span>  <span class=\"number\">1</span> 阶 + <span class=\"number\">1</span> 阶 </span><br><span class=\"line\"><span class=\"number\">2.</span>  <span class=\"number\">2</span> 阶</span><br><span class=\"line\"> 输入： <span class=\"number\">3</span></span><br><span class=\"line\">输出： <span class=\"number\">3</span></span><br><span class=\"line\">解释： 有三种方法可以爬到楼顶。</span><br><span class=\"line\"><span class=\"number\">1.</span>  <span class=\"number\">1</span> 阶 + <span class=\"number\">1</span> 阶 + <span class=\"number\">1</span> 阶 </span><br><span class=\"line\"><span class=\"number\">2.</span>  <span class=\"number\">1</span> 阶 + <span class=\"number\">2</span> 阶</span><br><span class=\"line\"><span class=\"number\">3.</span>  <span class=\"number\">2</span> 阶 + <span class=\"number\">1</span> 阶</span><br></pre></td></tr></table></figure><p> 动态规划 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//f(x)=f(x−1)+f(x−2)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>, dp2 = <span class=\"number\">2</span>, dp3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    dp3 = dp1 + dp2;</span><br><span class=\"line\">    dp1 = dp2;</span><br><span class=\"line\">    dp2 = dp3; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp3;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><s><strong> 矩阵快速幂 </strong></s></p><p> 具体解答可看 </p><p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/solution/pa-lou-ti-by-leetcode-solution/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://leetcode-cn.com/problems/climbing-stairs/solution/pa-lou-ti-by-leetcode-solution/</a></p><p><a href=\"https://www.cnblogs.com/cmmdc/p/6936196.html\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://www.cnblogs.com/cmmdc/p/6936196.html</a></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> climbStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> q = [[<span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = pow(q, n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pow = <span class=\"function\">(<span class=\"params\">a, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = [[<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">1</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n &amp; <span class=\"number\">1</span>) === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ret = multiply(ret, a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        a = multiply(a, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> multiply = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>).fill(<span class=\"number\">0</span>).map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>).fill(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">            c[i][j] = a[i][<span class=\"number\">0</span>] * b[<span class=\"number\">0</span>][j] + a[i][<span class=\"number\">1</span>] * b[<span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\" 第十天 \"><a class=\"headerlink\"href=\"# 第十天 \"></a> 第十天 </h2><h4 id=\" 反转链表 \"><a class=\"headerlink\"href=\"# 反转链表 \"></a><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 反转链表</a></h4><p> 给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure><p>栈 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先存到栈中 在建一个新的链表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [], p = head, i = <span class=\"number\">0</span>, tail, nhead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        stack.push(p.val);</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tail = nhead;</span><br><span class=\"line\">    len = stack.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> ListNode(stack.pop());</span><br><span class=\"line\">        tail.next = p;</span><br><span class=\"line\">        tail = tail.next;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nhead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p> 链表头插法 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = head, pnew, nhead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        pnew = <span class=\"keyword\">new</span> ListNode(p.val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!nhead) &#123;</span><br><span class=\"line\">            nhead = pnew;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pnew.next = nhead;</span><br><span class=\"line\">        nhead = pnew;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> nhead;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\" 第十一天 \"><a class=\"headerlink\"href=\"# 第十一天 \"></a> 第十一天 </h3><h4 id=\" 数组中的第 K 个最大元素 \"><a class=\"headerlink\"href=\"# 数组中的第 K 个最大元素 \"></a><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 数组中的第 K 个最大元素 </a></h4><p> 给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>**k**</code> 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>] 和 k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] 和 k = <span class=\"number\">4</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure><p>快排的思想 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//，随机选取数组中的数，把数组分成大于这个数的和小于这个数的, 求一下比它大的数组的长度就这个该数在数组中的大小了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findKthLargest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findK</span>(<span class=\"params\">nums, k</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = [],left = [], mid = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*nums.length),cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        cnt = nums[mid];</span><br><span class=\"line\">        nums.splice(mid, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; cnt) &#123;</span><br><span class=\"line\">                right.push(nums[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left.push(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//  console.log(k, cnt, left, right, nums);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right.length == k - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (right.length &gt; k - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> findK(right</span><br><span class=\"line\">                                                    , k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> findK(left, k - right.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = findK(nums, k);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\" 第十二天 \"><a class=\"headerlink\"href=\"# 第十二天 \"></a> 第十二天 </h3><h4 id=\" 环形链表 \"><a class=\"headerlink\"href=\"# 环形链表 \"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 环形链表</a></h4><p> 给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><p><strong>示例：</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p>快慢指针 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 快指针走两步，慢指针走一步 ，如果快慢指针相遇则证明有环</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasCycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head, slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast.next == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow == fast) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\" 第十三天 \"><a class=\"headerlink\"href=\"# 第十三天 \"></a> 第十三天 </h3><h4 id=\" 求根节点到叶节点数字之和 \"><a class=\"headerlink\"href=\"# 求根节点到叶节点数字之和 \"></a><a href=\"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 求根节点到叶节点数字之和 </a></h4><p> 给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。<br>每条从根节点到叶节点的路径都代表一个数字：</p><p>例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。<br>计算从根节点到叶节点生成的 所有数字之和 。</p><p>叶节点 是指没有子节点的节点。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"number\">25</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">从根到叶子节点路径 <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span> 代表数字 <span class=\"number\">12</span></span><br><span class=\"line\">从根到叶子节点路径 <span class=\"number\">1</span>-&gt;<span class=\"number\">3</span> 代表数字 <span class=\"number\">13</span></span><br><span class=\"line\">因此，数字总和 = <span class=\"number\">12</span> + <span class=\"number\">13</span> = <span class=\"number\">25</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//dfs</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumNumbers = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getValue = <span class=\"function\">(<span class=\"params\">node, sum</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nsum = sum * <span class=\"number\">10</span> + node.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.left == <span class=\"literal\">null</span> &amp;&amp; node.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nsum;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getValue(node.left, nsum) + getValue(node.right, nsum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getValue(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\" 第十四天 \"><a class=\"headerlink\"href=\"# 第十四天 \"></a>第十四天 </h3><h4 id=\" 最长回文子串 \"><a class=\"headerlink\"href=\"# 最长回文子串 \"></a><a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 最长回文子串 </a></h4><p> 给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例：</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s &#x3D; &quot;babad&quot;</span><br><span class=\"line\">输出：&quot;bab&quot;</span><br><span class=\"line\">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br><span class=\"line\">输入：s &#x3D; &quot;cbbd&quot;</span><br><span class=\"line\">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态规划     </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> len = s.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> s[<span class=\"number\">0</span>] == s[<span class=\"number\">1</span>] ? s : s[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> dp = <span class=\"built_in\">Array</span>(len).fill().map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">0</span>));</span><br><span class=\"line\">      <span class=\"keyword\">let</span> maxlen = <span class=\"number\">1</span>, st = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        dp[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j =  <span class=\"number\">0</span>; j + i &lt;= len; j++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> t = i + j - <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s[j] != s[t]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">2</span> &amp;&amp; !dp[j + <span class=\"number\">1</span>][t - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          dp[j][t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          maxlen = i;</span><br><span class=\"line\">          st = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s.slice(st, maxlen + st);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure><h3 id=\" 第十五天 \"><a class=\"headerlink\"href=\"# 第十五天 \"></a>第十五天 </h3><h4 id=\" 盛最多水的容器 \"><a class=\"headerlink\"href=\"# 盛最多水的容器 \"></a><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 盛最多水的容器 </a></h4><p> 给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>示例：</strong></p><p><img src=\"/gallery/Xnip2021-11-21_21-50-56.jpg\"alt=\"\"></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class=\"line\">输出：49 </span><br><span class=\"line\">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 双指针法 从较矮的一端开始移动 </span><br><span class=\"line\">var maxArea &#x3D; function(height) &#123;</span><br><span class=\"line\">  let max &#x3D; 0, l &#x3D; 0, r &#x3D; height.length - 1;</span><br><span class=\"line\">  while (l &lt; r) &#123;</span><br><span class=\"line\">    let maxVal &#x3D; Math.min(height[l], height[r]) * (r - l);</span><br><span class=\"line\">    max &#x3D; Math.max(max, maxVal);</span><br><span class=\"line\">    if (height[l] &lt; height[r]) l++;</span><br><span class=\"line\">    else r--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return max;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"第十六天\"><a class=\"headerlink\" href=\"# 第十六天\"></a> 第十六天 </h3><h4 id=\"电话号码的字母组合\"><a class=\"headerlink\" href=\"# 电话号码的字母组合\"></a><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 电话号码的字母组合 </a></h4><p> 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src=\"/gallery/Xnip2021-11-23_22-13-12.jpg\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：digits = <span class=\"string\">\"23\"</span></span><br><span class=\"line\">输出：[<span class=\"string\">\"ad\"</span>,<span class=\"string\">\"ae\"</span>,<span class=\"string\">\"af\"</span>,<span class=\"string\">\"bd\"</span>,<span class=\"string\">\"be\"</span>,<span class=\"string\">\"bf\"</span>,<span class=\"string\">\"cd\"</span>,<span class=\"string\">\"ce\"</span>,<span class=\"string\">\"cf\"</span>]</span><br><span class=\"line\">输入：digits = <span class=\"string\">\"\"</span></span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归 回溯法 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> letterCombinations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res= [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (digits == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>, <span class=\"string\">\"pqrs\"</span>, <span class=\"string\">\"tuv\"</span>, <span class=\"string\">\"wxyz\"</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">cur, t</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur == digits.length) &#123;</span><br><span class=\"line\">      res.push(t);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = digits[cur] - <span class=\"string\">'0'</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> map[index]) &#123;</span><br><span class=\"line\">      dfs(cur + <span class=\"number\">1</span>, t + c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dfs(<span class=\"number\">0</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//bfs 层次遍历</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> letterCombinations = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">digits</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (digits.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>, <span class=\"string\">\"pqrs\"</span>, <span class=\"string\">\"tuv\"</span>, <span class=\"string\">\"wxyz\"</span>];</span><br><span class=\"line\">  res.push(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> levelSize = res.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; levelSize; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> curStr = res.shift();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(curStr);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> letters = map[digits[i] - <span class=\"string\">'2'</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> l <span class=\"keyword\">of</span> letters) &#123;</span><br><span class=\"line\">        res.push(curStr + l);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"十七天\"><a class=\"headerlink\" href=\"# 十七天\"></a> 十七天 </h3><h4 id=\"最长重复子数组\"><a class=\"headerlink\" href=\"# 最长重复子数组\"></a><a href=\"https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 最长重复子数组 </a></h4><p> 给两个整数数组 <code>A</code> 和 <code>B</code> ，返回两个数组中公共的、长度最长的子数组的长度。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">A: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">B: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">输出：<span class=\"number\">3</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">长度最长的公共子数组是 [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>] 。</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法 1 滑动窗口 时间复杂度（m + n) * min (m, n);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxLen = <span class=\"function\">(<span class=\"params\">arr1, i, arr2, j, len</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>, max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; len; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr1[i + k] == arr2[j + k]) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = <span class=\"built_in\">Math</span>.max(max, count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = nums1.length, n = nums2.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"built_in\">Math</span>.min(n, m - i);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> max = maxLen(nums1, i, nums2, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        res = <span class=\"built_in\">Math</span>.max(res, max);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> len = <span class=\"built_in\">Math</span>.min(m, n - i);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> max = maxLen(nums1, <span class=\"number\">0</span>, nums2, i, len);</span><br><span class=\"line\">        res = <span class=\"built_in\">Math</span>.max(max, res);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><img src=\"/gallery/%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E4%B8%B2.gif\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dp[i]][j] 表示以 [i][j] 结尾的最长重复字串的长度</span></span><br><span class=\"line\"><span class=\"comment\">// 从后往前遍历 dp[i][j] 由 dp[i + 1][j + 1] 决定的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = nums1.length, n = nums2.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = <span class=\"built_in\">Array</span>.from(&#123;<span class=\"attr\">length</span>: m + <span class=\"number\">1</span>&#125;).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n + <span class=\"number\">1</span>).fill(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = m - <span class=\"number\">1</span> ; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            dp[i][j] = nums1[i] === nums2[j] ? dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            res = <span class=\"built_in\">Math</span>.max(res, dp[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 十八天 \"><a class=\"headerlink\"href=\"# 十八天 \"></a> 十八天 </h2><h4 id=\"209- 长度最小的子数组 \"><a class=\"headerlink\"href=\"#209- 长度最小的子数组 \"></a><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">209. 长度最小的子数组</a></h4><p> 给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p><strong>示例 </strong>：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 输入：target = <span class=\"number\">7</span>, nums = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释：子数组 [<span class=\"number\">4</span>,<span class=\"number\">3</span>] 是该条件下的长度最小的子数组。</span><br><span class=\"line\">输入：target = <span class=\"number\">4</span>, nums = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出：<span class=\"number\">1</span></span><br><span class=\"line\">输入：target = <span class=\"number\">11</span>, nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">0</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暴力法 n^2 遍历 i, j</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">                res = <span class=\"built_in\">Math</span>.min(res, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res == <span class=\"built_in\">Number</span>.MAX_VALUE ? <span class=\"number\">0</span> : res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 滑动窗口 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; n) &#123;</span><br><span class=\"line\">        sum += nums[end];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">Math</span>.min(ans, end- start + <span class=\"number\">1</span>);</span><br><span class=\"line\">            sum -= nums[start];</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans == <span class=\"built_in\">Number</span>.MAX_VALUE ? <span class=\"number\">0</span> : ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\" 十九天 \"><a class=\"headerlink\"href=\"# 十九天 \"></a> 十九天 </h2><h4 id=\"160- 相交链表 \"><a class=\"headerlink\"href=\"#160- 相交链表 \"></a><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">160. 相交链表</a></h4><p> 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p><p><img src=\"/gallery/letcode-160.png\"alt=\"\"></p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><p>自定义评测：</p><p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p><p>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>listA - 第一个链表 <br>listB - 第二个链表<br>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br> 评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。</p><p>注意，相等不是数值相等，而是地址相等 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!headA || !headB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pA = headA, pB = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pA  != pB) &#123;</span><br><span class=\"line\">        pA = pA != <span class=\"literal\">null</span> ? pA.next : headB;</span><br><span class=\"line\">        pB = pB != <span class=\"literal\">null</span> ? pB.next : headA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pA;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\"二十天\"><a class=\"headerlink\" href=\"# 二十天\"></a> 二十天 </h1><h4 id=\"209- 长度最小的子数组 -v2\"><a class=\"headerlink\" href=\"#209- 长度最小的子数组 -v2\"></a><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">209. 长度最小的子数组</a></h4><p> 给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = <span class=\"number\">7</span>, nums = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释：子数组 [<span class=\"number\">4</span>,<span class=\"number\">3</span>] 是该条件下的长度最小的子数组。</span><br><span class=\"line\">输入：target = <span class=\"number\">11</span>, nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">0</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暴力法： 直接遍历每个下标 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">                res = <span class=\"built_in\">Math</span>.min(res, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res == <span class=\"built_in\">Number</span>.MAX_VALUE ? <span class=\"number\">0</span> : res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 滑动数组 找到一个满足条件的数组 然后缩短它的边界</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; n) &#123;</span><br><span class=\"line\">        sum += nums[end];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">Math</span>.min(ans, end- start + <span class=\"number\">1</span>);</span><br><span class=\"line\">            sum -= nums[start];</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans == <span class=\"built_in\">Number</span>.MAX_VALUE ? <span class=\"number\">0</span> : ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"155- 最小栈\"><a class=\"headerlink\" href=\"#155- 最小栈\"></a><a href=\"https://leetcode-cn.com/problems/min-stack/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">155. 最小栈</a></h4><p> 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">\"MinStack\"</span>,<span class=\"string\">\"push\"</span>,<span class=\"string\">\"push\"</span>,<span class=\"string\">\"push\"</span>,<span class=\"string\">\"getMin\"</span>,<span class=\"string\">\"pop\"</span>,<span class=\"string\">\"top\"</span>,<span class=\"string\">\"getMin\"</span>]</span><br><span class=\"line\">[[],[<span class=\"number\">-2</span>],[<span class=\"number\">0</span>],[<span class=\"number\">-3</span>],[],[],[],[]]</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">-3</span>,<span class=\"literal\">null</span>,<span class=\"number\">0</span>,<span class=\"number\">-2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">解释：</span><br><span class=\"line\">MinStack minStack = <span class=\"keyword\">new</span> MinStack();</span><br><span class=\"line\">minStack.push(<span class=\"number\">-2</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">-3</span>);</span><br><span class=\"line\">minStack.getMin();   --&gt; 返回 <span class=\"number\">-3.</span></span><br><span class=\"line\">minStack.pop();</span><br><span class=\"line\">minStack.top();      --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.getMin();   --&gt; 返回 <span class=\"number\">-2.</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 辅助栈 另一个栈来存最小的 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> MinStack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.res = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.min = [<span class=\"built_in\">Number</span>.MAX_VALUE];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>.min[<span class=\"keyword\">this</span>.min.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &gt; val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.min.push(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.min.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.res.push(val);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.res.pop();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.min.pop();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.top = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.res[<span class=\"keyword\">this</span>.res.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.getMin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.min[<span class=\"keyword\">this</span>.min.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(val)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.getMin()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不用额外的空间，栈中存的进栈值与最小值的差值 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MinStack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.min = <span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.res = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minV = <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val &lt; minV) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.min = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.res.push(val - minV);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>.res.pop();</span><br><span class=\"line\">    <span class=\"comment\">// 如果最栈顶的值是大于 0，则不会影响最小值，如果大于 0 ，最小值 - 减去差值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.min = <span class=\"keyword\">this</span>.min - item;</span><br><span class=\"line\">    &#125;  <span class=\"comment\">// 返回差值 + 最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item + <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.top = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lastValue = <span class=\"keyword\">this</span>.res[<span class=\"keyword\">this</span>.res.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果栈顶小于 0，则返回最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lastValue &gt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>.min + lastValue : <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.getMin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.min;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(val)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.getMin()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure><h1 id=\"二十一天\"><a class=\"headerlink\" href=\"# 二十一天\"></a> 二十一天 </h1><h4 id=\"K- 个一组翻转链表\"><a class=\"headerlink\" href=\"#K- 个一组翻转链表\"></a><a href=\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> K 个一组翻转链表</a></h4><p> 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>进阶：</p><p>你可以设计一个只使用常数额外空间的算法来解决此问题吗？<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 k 个一组的反转链表的问题分解为 n 个反转链表的子问题 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseKGroup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 反转链表函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reversList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 反转区间 a, b 上的节点</span></span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">let</span> pre, cur, nxt;</span><br><span class=\"line\">        pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        cur = a; <span class=\"comment\">// 用于循环</span></span><br><span class=\"line\">        nxt = a;</span><br><span class=\"line\">        <span class=\"comment\">// 进行的操作是每次循环将 cur-&gt;pre, 注意 b 的方向没有改变</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != b) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 保存 a 的下一个的值 next</span></span><br><span class=\"line\">            nxt = cur.next;</span><br><span class=\"line\">            <span class=\"comment\">// 将 cur 指向上一个值的 pre（反转指向）</span></span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            <span class=\"comment\">// 将 pre 赋予当前值，当做下次循环的 pre</span></span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// pre 相当于 从后遍历到头，所有循环结束后，pre 指向头节点</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = head;</span><br><span class=\"line\">    <span class=\"comment\">// 判断区间 a,b 可以分为多少个长度为 k 的子区间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 剩余的节点不足 k 个，反转结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            b = b.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转前 k 个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newHead = reversList(a, b);</span><br><span class=\"line\">        a.next = reverseKGroup(b, k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\"二十二天\"><a class=\"headerlink\" href=\"# 二十二天\"></a> 二十二天 </h1><h4 id=\"最小路径和\"><a class=\"headerlink\" href=\"# 最小路径和\"></a><a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 最小路径和</a></h4><p> 给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>** 说明：** 每次只能向下或者向右移动一步。</p><p><strong>示例 </strong></p><p><img src=\"/gallery/minimun-path-sum.png\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 输入：grid = [[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>],[<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">输出：<span class=\"number\">7</span></span><br><span class=\"line\">解释：因为路径 <span class=\"number\">1</span>→<span class=\"number\">3</span>→<span class=\"number\">1</span>→<span class=\"number\">1</span>→<span class=\"number\">1</span> 的总和最小。</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的一道 dp 题 和之前走楼梯的思路差不多，不过这里 dp[i][j]存的是从左或者从上来的最小值加上本身的数字 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dp[i][j] 表示到达 i, j 所走的最短路径</span></span><br><span class=\"line\"> <span class=\"comment\">// dp[i][j] = Math.min(dp[i - 1][j], grid[i][j] ) +  + dp[i][j - 1]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minPathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid == <span class=\"literal\">null</span> || grid.length == <span class=\"literal\">null</span> || grid[<span class=\"number\">0</span>].length == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m).fill(<span class=\"number\">0</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n).fill(<span class=\"number\">0</span>));</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] =  grid[<span class=\"number\">0</span>][i] + dp[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">        dp[j][<span class=\"number\">0</span>] = grid[j][<span class=\"number\">0</span>] + dp[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = <span class=\"built_in\">Math</span>.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 压缩状态 压缩列</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minPathSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid == <span class=\"literal\">null</span> || grid.length == <span class=\"literal\">null</span> || grid[<span class=\"number\">0</span>].length == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> m = grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m).fill(<span class=\"number\">0</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n).fill(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"comment\">// dp[j] = dp[i - 1][j];</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[j - 1] = dp[i][j - 1]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> &amp;&amp; j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[j] = grid[i][j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[j] = dp[j] + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[j] = dp[j - <span class=\"number\">1</span>] + grid[i][j];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[j] = <span class=\"built_in\">Math</span>.min(dp[j], dp[j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\" 二十三天 \"><a class=\"headerlink\"href=\"# 二十三天 \"></a> 二十三天 </h1><h4 id=\" 翻转字符串里的单词 \"><a class=\"headerlink\"href=\"# 翻转字符串里的单词 \"></a><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 翻转字符串里的单词 </a></h4><p> 给你一个字符串 s ，逐个翻转字符串中的所有 单词 。</p><p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p><p>请你返回一个翻转 s 中单词顺序并用单个空格相连的字符串。</p><p>说明：</p><p>输入字符串 s 可以在前面、后面或者单词间包含多余的空格。<br>翻转后单词间应当仅用一个空格分隔。<br>翻转后的字符串中不应包含额外的空格。</p><p><strong>示例：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = <span class=\"string\">\"the sky is blue\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"blue is sky the\"</span></span><br><span class=\"line\">输入：s = <span class=\"string\">\"  hello world  \"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"world hello\"</span></span><br><span class=\"line\">解释：输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 api trim 去除字符串两端的空格， split 以一个或多个空格 (\\s) 分隔， reverse()反转， join(\" \") </span></span><br><span class=\"line\"><span class=\"comment\">// 以空格分开 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.trim().split(<span class=\"regexp\">/\\s+/</span>).reverse().join(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 利用双端队列 找出单词，然后连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>, right = s.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = [], word = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.charAt(left) == <span class=\"string\">\"\"</span>) left++;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (s.charAt(right) == <span class=\"string\">\" \"</span>) right--;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> char = s.charAt(left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char == <span class=\"string\">\" \"</span> &amp;&amp; word) &#123;</span><br><span class=\"line\">      ans.unshift(word);</span><br><span class=\"line\">      word = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char != <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">      word += char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ans.unshift(word)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\" 二十四天 \"><a class=\"headerlink\"href=\"# 二十四天 \"></a> 二十四天 </h1><h4 id=\" 二叉树的锯齿形层序遍历 \"><a class=\"headerlink\"href=\"# 二叉树的锯齿形层序遍历 \"></a><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 二叉树的锯齿形层序遍历 </a></h4><p> 给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>锯齿形层序遍历 </strong> 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p><strong> 示例 </strong></p><p><img src=\"/gallery/zigzagLevelOrder.png\"alt=\"\"></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 输入：root &#x3D; [3,9,20,null,null,15,7]</span><br><span class=\"line\">输出：[[3],[20,9],[15,7]]</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 层次遍历， 如果是奇数次，则往前插入数据，偶数则往尾部插入 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zigzagLevelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [], queue = [], times = <span class=\"number\">0</span>;</span><br><span class=\"line\">    queue.push(root);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bfs = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">            <span class=\"keyword\">let</span> len = queue.length</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> node = queue.shift();</span><br><span class=\"line\">                node.left &amp;&amp; queue.push(node.left)</span><br><span class=\"line\">                node.right &amp;&amp; queue.push(node.right)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (times &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    arr.unshift(node.val)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    arr.push(node.val);  </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                           </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push(arr);</span><br><span class=\"line\">            times++;          </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\"二十五天\"><a class=\"headerlink\" href=\"# 二十五天\"></a> 二十五天 </h1><h4 id=\"两个数组的交集\"><a class=\"headerlink\" href=\"# 两个数组的交集\"></a><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 两个数组的交集 </a></h4><p> 给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 </strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 输入：nums1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>], nums2 = [<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">2</span>]</span><br><span class=\"line\">输入：nums1 = [<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>], nums2 = [<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">9</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 set 去重， 从数量少的集合中找， 时间复杂度 O(n + m), 使用 set 存数据的时间复杂度为 O(n + m), 查找）O(min(m, n));</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums1);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums2);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dealResult = <span class=\"function\">(<span class=\"params\">set1, set2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> s <span class=\"keyword\">of</span> set1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set2.has(s)) &#123;</span><br><span class=\"line\">                ans.push(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> set1.size &gt; set2.size ? dealResult(set2, set1) : dealResult(set1, set2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 双指针，时间复杂度 O(mlogm + nlogn)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums1 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> nums2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> nums1;</span><br><span class=\"line\">    nums1.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">    nums2.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, res = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; nums1.length &amp;&amp; j &lt; nums2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.push(nums1[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(res));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"旋转图像\"><a class=\"headerlink\" href=\"# 旋转图像\"></a><a href=\"https://leetcode-cn.com/problems/rotate-image/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">旋转图像 </a></h4><p> 给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p><strong>示例 </strong></p><p><img src=\"/gallery/rotate-image.png\" alt=\"\"></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class=\"line\">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先上下翻转 在对角翻转 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rotate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = matrix.length;</span><br><span class=\"line\">    <span class=\"comment\">// 水平翻转</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.floor(n / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            [matrix[i][j], matrix[n - i - <span class=\"number\">1</span>][j]] = [matrix[n - i - <span class=\"number\">1</span>][j], matrix[i][j]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对角线翻转</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> matrix;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h1 id=\" 二十六天 \"><a class=\"headerlink\"href=\"# 二十六天 \"></a> 二十六天 </h1><h4 id=\"54- 二叉搜索树的第 k 大节点 \"><a class=\"headerlink\"href=\"#54- 二叉搜索树的第 k 大节点 \"></a><a href=\"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">54. 二叉搜索树的第 k 大节点</a></h4><p> 给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值。</p><p><strong>示例 1:</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: root = [<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"literal\">null</span>,<span class=\"number\">2</span>], k = <span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"number\">3</span></span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> <span class=\"number\">1</span>   <span class=\"number\">4</span></span><br><span class=\"line\">  \\</span><br><span class=\"line\">   <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\">输入: root = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">1</span>], k = <span class=\"number\">3</span></span><br><span class=\"line\">       <span class=\"number\">5</span></span><br><span class=\"line\">      / \\</span><br><span class=\"line\">     <span class=\"number\">3</span>   <span class=\"number\">6</span></span><br><span class=\"line\">    / \\</span><br><span class=\"line\">   <span class=\"number\">2</span>   <span class=\"number\">4</span></span><br><span class=\"line\">  /</span><br><span class=\"line\"> <span class=\"number\">1</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 易知，二叉排序树的中序遍历是从小到到大已经排好序的</span></span><br><span class=\"line\"><span class=\"comment\">// 递归 逆中序遍历， 先遍历右节点再遍历根节点，最后遍历左节点</span></span><br><span class=\"line\"><span class=\"comment\">// O(n) O(n)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> kthLargest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        dfs(node.right) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--k  === <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            res = node.val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 莫里斯遍历，其实就是树形结构的扁平化，逆莫里斯遍历就能得到答案了</span></span><br><span class=\"line\"><span class=\"comment\">// 正序莫里斯遍历</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> morris = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 先判断该节点有没有左儿子</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有，就找左儿子的最右边的孩子 pre，其实就是中序遍历该节点的前一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> pre = root.left;</span><br><span class=\"line\">            <span class=\"comment\">// 注意这里该节点的右节点不能指向自己</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pre.right &amp;&amp; pre.right != root) &#123;</span><br><span class=\"line\">                pre = pre.right;</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"comment\">// 再看 pre 有没有右孩子</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pre.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果没有，则 pre 的 right 指向 root, root 指向 root 的左孩子</span></span><br><span class=\"line\">                pre.right == root;</span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有，就说明，这个节点之前已经遍历过了，它的左边已经遍历完了，pre 的 right 设为 null</span></span><br><span class=\"line\">                <span class=\"comment\">// 此时 root 就是我们要找的元素， root 向右移动</span></span><br><span class=\"line\">                pre.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 这里处理结果</span></span><br><span class=\"line\">                <span class=\"comment\">// 例如</span></span><br><span class=\"line\">                res.push(root.val);</span><br><span class=\"line\">                root = root.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 没有，此时 root 元素就是我们要找的元素，root 向右移动</span></span><br><span class=\"line\">            <span class=\"comment\">// 处理结果</span></span><br><span class=\"line\">            res.push(root.val)</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// res 中保留着中序遍历的结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 逆莫里斯遍历</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> morris = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> pre = node.right;</span><br><span class=\"line\">                <span class=\"comment\">// 找左儿子的最右端</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (pre.left &amp;&amp; pre.left != node) &#123;</span><br><span class=\"line\">                    pre = pre.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pre.left == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    pre.left = node;</span><br><span class=\"line\">                    node = node.right;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    pre.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    k--;</span><br><span class=\"line\">                    node = node.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                res = node.val;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 利用栈实现迭代遍历</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (root || stack.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 左节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root) &#123;</span><br><span class=\"line\">        stack.push(root);</span><br><span class=\"line\">        root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = stack.pop()</span><br><span class=\"line\">    <span class=\"comment\">// 根节点</span></span><br><span class=\"line\">    ans.push(root.val);</span><br><span class=\"line\">    root = root.right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","url":"/posts/35458/","min2read":44,"word4post":"9.3k","prev_post":{"title":"CSS 画一个月饼","url":"/posts/4214/"},"next_post":{"title":"前端简历该怎么写","url":"/posts/49802/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"第一天\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 第一天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"合并两个有序数组\" href = \"#\"><span class=\"toc-number\">1.0.1.</span> <span class=\"toc-text\"> 合并两个有序数组 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"第二天\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">第二天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"买卖股票的最佳时机\" href = \"#\"><span class=\"toc-number\">2.0.1.</span> <span class=\"toc-text\"> 买卖股票的最佳时机 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"第三天\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">第三天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"字符串相加\" href = \"#\"><span class=\"toc-number\">3.0.1.</span> <span class=\"toc-text\"> 字符串相加 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"第四天\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\"> 第四天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"无重复字符的最长子串\" href = \"#\"><span class=\"toc-number\">4.0.1.</span> <span class=\"toc-text\"> 无重复字符的最长子串 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第五天 \" href = \"#\"><span class=\"toc-number\">5.</span> <span class=\"toc-text\"> 第五天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"165- 比较版本号 \" href = \"#\"><span class=\"toc-number\">5.0.1.</span> <span class=\"toc-text\">165. 比较版本号</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第六天 \" href = \"#\"><span class=\"toc-number\">6.</span> <span class=\"toc-text\"> 第六天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 两数之和 \" href = \"#\"><span class=\"toc-number\">6.0.1.</span> <span class=\"toc-text\"> 两数之和</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第七天 \" href = \"#\"><span class=\"toc-number\">7.</span> <span class=\"toc-text\"> 第七天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 最大子序和 \" href = \"#\"><span class=\"toc-number\">7.0.1.</span> <span class=\"toc-text\"> 最大子序和 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第八天 \" href = \"#\"><span class=\"toc-number\">8.</span> <span class=\"toc-text\"> 第八天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 全排列 \" href = \"#\"><span class=\"toc-number\">8.0.1.</span> <span class=\"toc-text\"> 全排列 </span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 全排列 -II\" href = \"#\"><span class=\"toc-number\">8.0.2.</span> <span class=\"toc-text\"> 全排列 II</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第九天 \" href = \"#\"><span class=\"toc-number\">9.</span> <span class=\"toc-text\"> 第九天 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 第十天 \" href = \"#\"><span class=\"toc-number\">10.</span> <span class=\"toc-text\"> 第十天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 反转链表 \" href = \"#\"><span class=\"toc-number\">10.0.1.</span> <span class=\"toc-text\"> 反转链表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 第十一天 \" href = \"#\"><span class=\"toc-number\">10.1.</span> <span class=\"toc-text\"> 第十一天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 数组中的第 K 个最大元素 \" href = \"#\"><span class=\"toc-number\">10.1.1.</span> <span class=\"toc-text\"> 数组中的第 K 个最大元素 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 第十二天 \" href = \"#\"><span class=\"toc-number\">10.2.</span> <span class=\"toc-text\"> 第十二天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 环形链表 \" href = \"#\"><span class=\"toc-number\">10.2.1.</span> <span class=\"toc-text\"> 环形链表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 第十三天 \" href = \"#\"><span class=\"toc-number\">10.3.</span> <span class=\"toc-text\"> 第十三天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 求根节点到叶节点数字之和 \" href = \"#\"><span class=\"toc-number\">10.3.1.</span> <span class=\"toc-text\"> 求根节点到叶节点数字之和 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 第十四天 \" href = \"#\"><span class=\"toc-number\">10.4.</span> <span class=\"toc-text\">第十四天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 最长回文子串 \" href = \"#\"><span class=\"toc-number\">10.4.1.</span> <span class=\"toc-text\"> 最长回文子串 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 第十五天 \" href = \"#\"><span class=\"toc-number\">10.5.</span> <span class=\"toc-text\">第十五天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 盛最多水的容器 \" href = \"#\"><span class=\"toc-number\">10.5.1.</span> <span class=\"toc-text\"> 盛最多水的容器 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"第十六天\" href = \"#\"><span class=\"toc-number\">10.6.</span> <span class=\"toc-text\"> 第十六天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"电话号码的字母组合\" href = \"#\"><span class=\"toc-number\">10.6.1.</span> <span class=\"toc-text\"> 电话号码的字母组合 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"十七天\" href = \"#\"><span class=\"toc-number\">10.7.</span> <span class=\"toc-text\"> 十七天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"最长重复子数组\" href = \"#\"><span class=\"toc-number\">10.7.1.</span> <span class=\"toc-text\"> 最长重复子数组 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 十八天 \" href = \"#\"><span class=\"toc-number\">11.</span> <span class=\"toc-text\"> 十八天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"209- 长度最小的子数组 \" href = \"#\"><span class=\"toc-number\">11.0.1.</span> <span class=\"toc-text\">209. 长度最小的子数组</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\" 十九天 \" href = \"#\"><span class=\"toc-number\">12.</span> <span class=\"toc-text\"> 十九天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"160- 相交链表 \" href = \"#\"><span class=\"toc-number\">12.0.1.</span> <span class=\"toc-text\">160. 相交链表</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"二十天\" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"209- 长度最小的子数组 -v2\" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\">209. 长度最小的子数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"155- 最小栈\" href = \"#\"><span class=\"toc-number\">0.0.2.</span> <span class=\"toc-text\">155. 最小栈</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"二十一天\" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十一天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"K- 个一组翻转链表\" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\"> K 个一组翻转链表</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"二十二天\" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十二天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"最小路径和\" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\"> 最小路径和</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 二十三天 \" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十三天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 翻转字符串里的单词 \" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\"> 翻转字符串里的单词 </span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 二十四天 \" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十四天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\" 二叉树的锯齿形层序遍历 \" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\"> 二叉树的锯齿形层序遍历 </span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"二十五天\" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十五天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"两个数组的交集\" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\"> 两个数组的交集 </span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"旋转图像\" href = \"#\"><span class=\"toc-number\">0.0.2.</span> <span class=\"toc-text\">旋转图像 </span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 二十六天 \" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\"> 二十六天 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"54- 二叉搜索树的第 k 大节点 \" href = \"#\"><span class=\"toc-number\">0.0.1.</span> <span class=\"toc-text\">54. 二叉搜索树的第 k 大节点</span></a></li></ol></li></ol></li></ol>","categories":[{"name":"刷题","path":"api/categories/刷题.json","url":"/categories/刷题/"}],"tags":[{"name":"刷题","path":"api/tags/刷题.json","url":"/tags/刷题/"}]}