{"title":"JS 中 == 与 ===","slug":"JS中-与","date":"2022-02-04","updated":"2022-02-04","comments":true,"path":"api/posts/33716.json","excerpt":"<p></p>","cover":"/gallery/js-2022-2-12.jpeg","covers":["/gallery/js-2022-2-12.jpeg"],"content":"<p><img src=\"/gallery/js-2022-2-12.jpeg\" alt=\"\"></p><a id=\"more\"></a><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123; </span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">' 成功 '</span>);\t\t<span class=\"comment\">// 成功 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p> 问：a 取什么值的时候会输出 <strong> 成功 </strong></p><p> 解答：明显这道题考了“==”的判断，先复习一下“===”和“==”的比较过程 </p><p><strong>===</strong></p><p>1. 如果类型不同，就<strong> 不相等 </strong></p><p>2. 如果两个都是数值，并且是同一个值，那么<strong> 相等 </strong>，如果数值是 NaN, 则<strong> 不相等 </strong></p><p>3. 如果两个是字符串，每个位置的字符都是一样的，那么<strong> 相等 </strong>，否则<strong> 不相等 </strong></p><p>4. 如果两个都是 true、false、null、undefined，那么<strong> 相等 </strong>，否则<strong> 不相等 </strong></p><p>5. 如果两个值都是引用同一个对象或者函数，那么<strong> 相等 </strong>，否则<strong> 不相等 </strong></p><p><strong>==</strong></p><p>1. 如果两个值类型形同，进行 === 比较</p><p>2. 如果两个类型不同，他们可能相等，规则如下</p><p>a、如果是一个 null、一个 undefined，那么相等</p><p>b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较</p><p>c、如果任一值是 true，把它变成 1 再比较；如果任一值是 false，把它转换成 0 再比较</p><p>(undefined、null、false、-0、NaN,’’ , 这个 6 个值会解释成 false，其他的值都会被解释为 true)</p><p>d、如果是一个对象，另一个是数值或者字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的 toSting 或者 valueOf 方法。js 核心内置类，会尝试 valueOf 先于 toString; 例外的是 Date，Date 利用的是 toString 转换。</p><p>e、其他组合都不相等</p><p> 所以，改写 a 的 toString 方法即可，每次进行“==”判断的时候动态改变 a 的值</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; </span><br><span class=\"line\">\ti: <span class=\"number\">1</span>,</span><br><span class=\"line\">\ttoString () &#123; \t\t<span class=\"comment\">// 或者 valueOf </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.i++ \t<span class=\"comment\">// 根据逻辑，这里是先返 return 后加 </span></span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123; </span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">' 成功 '</span>);\t\t<span class=\"comment\">// 成功</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.i)  <span class=\"comment\">// 4  每调用一次 toString 方法 i 自增，证明确实有在自动调用 toString 方法</span></span><br></pre></td></tr></table></figure>","url":"/posts/33716/","min2read":1,"word4post":498,"prev_post":{"title":"详解 js 继承","url":"/posts/31746/"},"next_post":{"title":"React 的生命周期验证","url":"/posts/36377/"},"toc":"","categories":[],"tags":[]}