{"title":"JavaScript 中的对象","slug":"JavaScript中的对象","date":"2021-04-17","updated":"2021-05-09","comments":true,"path":"api/posts/10347.json","excerpt":"<p>JS 对象总结 </p>","cover":null,"covers":null,"content":"<p>JS 对象总结 </p><a id=\"more\"></a><p> 学习 js 也有一段时间了，是时候来总结一下 js 中的对象以及它们的方法了。</p><h2 id=\"Array 对象\"><a class=\"headerlink\" href=\"#Array 对象\"></a>Array 对象 </h2><p>array 对象用于单个变量中存储多个值。</p><h3 id=\"创建 Array 对象的语法\"><a class=\"headerlink\" href=\"# 创建 Array 对象的语法\"></a> 创建 Array 对象的语法 </h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size);   <span class=\"comment\">// 参数 size 是期望的数组的个数，返回的数组，length 字段被设为 size 的值。</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(element0, element1, element2, element3, ....);</span><br><span class=\"line\"><span class=\"comment\">//element.. 为参数列表。当使用这些参数来调用构造函数 Array() 时</span></span><br></pre></td></tr></table></figure><h3 id=\"返回值\"><a class=\"headerlink\" href=\"# 返回值\"></a>返回值 </h3><p> 返回新创建并初始化了数组。</p><p>如果调用了构造函数 Array()时没有使用参数，那么返回的数组为空，length 字段为 0。</p><p>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为 undefined 的数组。</p><p>当其他参数调用 Array()时，该构造函数将用参数指定的值初始化数组。</p><p>当构造函数作为函数调用，不用 new 运算符时，它的行为与使用 new 运算符调用它时的行为完全一样。</p><h3 id=\"Array- 对象属性\"><a class=\"headerlink\" href=\"#Array- 对象属性\"></a>Array 对象属性 </h3><h4 id=\"constructor\"><a class=\"headerlink\" href=\"#constructor\"></a>constructor</h4><h5 id=\"定义和用法\"><a class=\"headerlink\" href=\"# 定义和用法\"></a> 定义和用法 </h5><p>constructor 属性返回对创建此对象的数组函数的引用。</p><h5 id=\"语法\"><a class=\"headerlink\" href=\"# 语法\"></a> 语法 </h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.constructor</span><br></pre></td></tr></table></figure><p> 例子 1</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数创建数组 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (test.constructor == <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is an Array\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">This is an <span class=\"built_in\">Array</span></span><br><span class=\"line\"><span class=\"comment\">// 字面量的方式</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> arr2=[];</span><br></pre></td></tr></table></figure><h3 id=\"Array- 对象方法\"><a class=\"headerlink\" href=\"#Array- 对象方法\"></a>Array 对象方法</h3><p>1、Array.isArray(对象)----&gt; 判断这个对象是不是数组</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断对象是不是数组类型: 两种</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"comment\">//1 instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj=[];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2 使用数组的 isArray</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(obj));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure><p>2、Array.concat(数组, 数组, 数组,…) 组合一个新的数组</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2=[<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.concat(arr2));<span class=\"comment\">//[10, 20, 30, 40, 50, 60]</span></span><br></pre></td></tr></table></figure><p>3 、Array.every(函数)–是对数组中每一项运行给定函数，如果该函数对每一项返回 true, 则返回 true。every 从迭代开始，一旦有一个不符合条件，则不会继续迭代下去。</p><p> 返回值是布尔类型, 函数作为参数使用, 函数中有三个参数, 第一个参数是元素的值，第二个参数是索引值, 第三个参数是原来的数组 (没用)、如果这个数组中的每个元素的值都符合条件, 最后才返回的是 true</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'item='</span> + item + <span class=\"string\">',index='</span> + index + <span class=\"string\">',array='</span> + array);</span><br><span class=\"line\">    <span class=\"comment\">//item 是数组的值 index 自动循环的值 array 自身的数组（一般没用 只用前面两项参数）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里写函数的判断 只要有一个不是 true 就停止继续循环 只有全部函数判断结果为 true 才返回 true</span></span><br><span class=\"line\">&#125;));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"string\">\"小明明 lkko\"</span>,<span class=\"string\">\"小曹操 674\"</span>,<span class=\"string\">\"小白白 bd\"</span>,<span class=\"string\">\"笑眯眯 a\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag=arr.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele,index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组中的每个元素的长度是不是大于 4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele.length&gt;<span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure><p>4、Array.some()(函数)–是对数组中每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。some 一直在找符合条件的值，一旦找到，则不会继续迭代下去</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ]; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.some( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> item, index, array </span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'item='</span> + item + <span class=\"string\">',index='</span>+index+<span class=\"string\">',array='</span>+array ); </span><br><span class=\"line\">    <span class=\"comment\">//item 是数组的值 index 自动循环的值 array 自身的数组（一般没用 只用前面两项参数）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span>; </span><br><span class=\"line\">    <span class=\"comment\">// 这里写函数的判断 只要有一个是 true 就停止继续循环 有一个函数判断结果为 true 就返回 true</span></span><br><span class=\"line\">&#125;)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure><p>5、Array.filter(函数); 返回的是数组中每一个元素都复合条件的元素, 组成了一个新的数组</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>, <span class=\"number\">70</span>, <span class=\"number\">80</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele</span>) </span>&#123;<span class=\"comment\">//ele--- 每个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele &gt; <span class=\"number\">40</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[50, 60, 70, 80]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以用来去重</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[10, 20, 40, 60, 100]</span></span><br></pre></td></tr></table></figure><p>6、Array.push(值);—&gt; 把值追加到数组中, 加到最后了—返回值也是追加数据之后的数组长度（重点 +++）</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">40</span>));<span class=\"comment\">// 返回值是 增加后的数组涨肚</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[10, 20, 30, 40]</span></span><br></pre></td></tr></table></figure><p>7、Array.pop();—&gt; 删除数组中最后一个元素, 返回值就是删除的这个值（重点 +++）</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop());<span class=\"comment\">// 返回值是删除的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[10, 20, 30]</span></span><br></pre></td></tr></table></figure><p>8、Array.shift();—&gt; 删除数组中第一个元素, 返回值就是删除的这个值（重点 +++）</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift());<span class=\"comment\">// 返回值是删除的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[20, 30，40]</span></span><br></pre></td></tr></table></figure><p>9、Array.unshift();—&gt; 向数组的第一个元素前面插入一个新的元素,---- 返回值是插入后的程度（重点 +++）</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=arr.unshift(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">// 返回现在的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[5,10,20,30,40,50]</span></span><br></pre></td></tr></table></figure><p>10、Array.forEach(函数) 方法—遍历数组用—相当于 for 循环 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele,index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"数组的值：\"</span>+ele+<span class=\"string\">'----'</span>+<span class=\"string\">\"自迭代的值：\"</span>+index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 数组的值：10---- 自迭代的值：0</span></span><br><span class=\"line\"><span class=\"comment\">// 数组的值：20---- 自迭代的值：1</span></span><br><span class=\"line\"><span class=\"comment\">// 数组的值：30---- 自迭代的值：2</span></span><br><span class=\"line\"><span class=\"comment\">// 数组的值：40---- 自迭代的值：3</span></span><br></pre></td></tr></table></figure><p>11、Array.map(函数);—&gt; 数组中的每个元素都要执行这个函数, 把执行后的结果重新的全部的放在一个新的数组中</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(a, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.map(f1));<span class=\"comment\">//[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>12、Array.indexOf(元素值); 返回的是索引, 没有则是 -1</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">10</span>)); <span class=\"comment\">// 返回对于字符串的索引</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.indexOf(<span class=\"number\">50</span>));<span class=\"comment\">// 找不到就返回 -1</span></span><br></pre></td></tr></table></figure><p>13、Array.join(“字符串”);---- 数组中每个值与字符串拼接 返回的是一个字符串</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小红\"</span>,<span class=\"string\">\"小芳\"</span>,<span class=\"string\">\"小绿\"</span>,<span class=\"string\">\"小苏\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=arr.join(<span class=\"string\">\"|\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);<span class=\"comment\">// 小白 | 小黑 | 小红 | 小芳 | 小绿 | 小苏</span></span><br></pre></td></tr></table></figure><p>14、Array.reverse();-----&gt; 反转数组</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>];</span><br><span class=\"line\">arr.reverse();<span class=\"comment\">// 反转</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[50, 40, 30, 20, 10]</span></span><br></pre></td></tr></table></figure><p>15、Array.sort();—排序</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一维数组 倒序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>];</span><br><span class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b - a;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维数组 倒序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>],[<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],[<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>]];</span><br><span class=\"line\">arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0: (3) [8, 2, 1]</span></span><br><span class=\"line\"><span class=\"comment\">1: (3) [5, 7, 4]</span></span><br><span class=\"line\"><span class=\"comment\">2: (3) [4, 6, 2]</span></span><br><span class=\"line\"><span class=\"comment\">3: (3) [4, 1, 7]</span></span><br><span class=\"line\"><span class=\"comment\">4: (3) [3, 2, 1]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><p>16、Array.slice(开始的索引, 结束的索引); 把截取的数组的值放在一个新的数组中, 但是不包含结束的索引对应的元素值</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">60</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr= arr.slice(<span class=\"number\">3</span>,<span class=\"number\">7</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">// [40, 50, 60, 70]</span></span><br></pre></td></tr></table></figure><p>17、Array.splice(开始的位置, 要删除的个数, 替换的元素的值); 一般是用于删除数组中的元素, 或者是替换元素, 或者是插入元素（重点 ++）</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFish = [<span class=\"string\">'angel'</span>, <span class=\"string\">'clown'</span>, <span class=\"string\">'mandarin'</span>, <span class=\"string\">'sturgeon'</span>];</span><br><span class=\"line\">myFish.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'drum'</span>); <span class=\"comment\">// 在索引为 2 的位置插入 'drum'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFish);<span class=\"comment\">//[\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">myFish.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 从索引为 2 的位置删除一项（也就是 'drum' 这一项）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFish);<span class=\"comment\">//[\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]</span></span><br></pre></td></tr></table></figure><h2 id=\"String 对象\"><a class=\"headerlink\" href=\"#String 对象\"></a>String 对象</h2><p><strong>charAt()</strong>: 返回在指定位置的字符。</p><p><strong>charCodeAt()</strong>: 返回在指定的位置的字符的 Unicode 编码。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">2</span>);  <span class=\"comment\">//i</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">2</span>);  <span class=\"comment\">//105</span></span><br></pre></td></tr></table></figure><p><strong>concat()</strong>: 连接字符串，参数可以是多个字符串。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"extend\"</span>;</span><br><span class=\"line\">s1.concat(s2);  <span class=\"comment\">//Smile forever!extend</span></span><br><span class=\"line\">s1.concat(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>) <span class=\"comment\">//Smile forever!ab</span></span><br></pre></td></tr></table></figure><p><strong>split()</strong>: 用于把一个字符串分割成字符串数组。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"get out\"</span>;</span><br><span class=\"line\">s.split(<span class=\"string\">\"\"</span>);  <span class=\"comment\">//g,e,t, ,o,u,t</span></span><br><span class=\"line\">s.split(<span class=\"string\">\" \"</span>);  <span class=\"comment\">//get,out</span></span><br><span class=\"line\">s.split(<span class=\"string\">\"\"</span>,<span class=\"number\">3</span>);  <span class=\"comment\">//g,e,t 第二个参数指定返回的数组的最大</span></span><br></pre></td></tr></table></figure><p><strong>replace()</strong>: 替换字符串。该方法接受两个参数，第一个参数是被替换的字符串或正则表达式(RegExp 对象)，第二参数是一个字符串或函数。如第一个参数是字符串，则只会替代第一个子字符串，需要全部替换，需要用正则表达式，指定全局标志 g。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"cat, bat, sat\"</span>;</span><br><span class=\"line\">s.replace(<span class=\"string\">\"at\"</span>,<span class=\"string\">\"od\"</span>);  <span class=\"comment\">//cod, bat, sat</span></span><br><span class=\"line\">s.replace(<span class=\"regexp\">/at/g</span>,<span class=\"string\">\"od\"</span>);  <span class=\"comment\">//cod, bod, sod</span></span><br></pre></td></tr></table></figure><p><strong>indexOf()</strong>: 返回某个指定的字符串值在字符串中首次出现的位置。该方法对大小写敏感！</p><p><strong>lastIndexOf()</strong>: 从后向前搜索字符串。该方法对大小写敏感！</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.indexOf(<span class=\"string\">\"smile\"</span>);  <span class=\"comment\">//-1</span></span><br><span class=\"line\">s.indexOf(<span class=\"string\">\"Smile\"</span>);  <span class=\"comment\">//0</span></span><br><span class=\"line\">s.indexOf(<span class=\"string\">\"e\"</span>,<span class=\"number\">6</span>);  <span class=\"comment\">//9, 第二个参数规定在字符串中开始检索的位置。</span></span><br><span class=\"line\">s.indexOf(<span class=\"string\">\"e\"</span>);  <span class=\"comment\">//4</span></span><br><span class=\"line\">s.lastIndexOf(<span class=\"string\">\"e\"</span>);  <span class=\"comment\">//11</span></span><br></pre></td></tr></table></figure><p><strong>match()</strong>: 在字符串内检索指定的<strong> 值</strong>，或找到一个或多个正则表达式的匹配。注意标志 g(全局搜素模式)。</p><p><strong>search()</strong>: 参数与 match()相同，返回字符串中第一个匹配项的 <strong> 索引 </strong>，若没有找到匹配项，则返回 -1。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">\"1 plus 2 plus 3\"</span>;</span><br><span class=\"line\">str.match(<span class=\"string\">\"p\"</span>);  <span class=\"comment\">//p</span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/\\d+/</span>); <span class=\"comment\">//1 </span></span><br><span class=\"line\">str.match(<span class=\"regexp\">/\\d+/g</span>); <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.search(<span class=\"string\">\"smile\"</span>);  <span class=\"comment\">//-1</span></span><br><span class=\"line\">s.search(<span class=\"regexp\">/le/</span>);  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure><p><strong>slice()</strong>: 提取字符串。slice(start,[end])</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.slice(<span class=\"number\">2</span>);  <span class=\"comment\">//ile forever!</span></span><br><span class=\"line\">s.slice(<span class=\"number\">2</span>,<span class=\"number\">4</span>);  <span class=\"comment\">//il</span></span><br><span class=\"line\">s.slice(<span class=\"number\">-4</span>,<span class=\"number\">-2</span>); <span class=\"comment\">//ve</span></span><br></pre></td></tr></table></figure><p><strong>substr()</strong>: substr(start,[length]) ！注意：ECMAscript 没有对该方法进行标准化，因此反对使用它。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.substr(<span class=\"number\">2</span>);  <span class=\"comment\">//ile forever!</span></span><br><span class=\"line\">s.substr(<span class=\"number\">2</span>,<span class=\"number\">5</span>);  <span class=\"comment\">//ile f</span></span><br><span class=\"line\">s.substr(<span class=\"number\">-4</span>,<span class=\"number\">2</span>); <span class=\"comment\">//ve</span></span><br></pre></td></tr></table></figure><p><strong>substring()</strong>: substring(start,[stop]) 其内容是从 <em>start</em> 处到 <em>stop</em>-1 处的所有字符。如<em>start</em> 与 <em>stop</em> 相等，则返回空串。不接受负值！</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>);  <span class=\"comment\">//ile forever!</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>,<span class=\"number\">4</span>);  <span class=\"comment\">//il</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>,<span class=\"number\">2</span>);  <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure><p><strong>toLowerCase()</strong>: 把字符串转换为小写。</p><p><strong>toUpperCase()</strong>: 把字符串转换为大写。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile forever!\"</span>;</span><br><span class=\"line\">s.toLowerCase();  <span class=\"comment\">//smile forever!</span></span><br><span class=\"line\">s.toUpperCase();  <span class=\"comment\">//SMILE FOREVER!</span></span><br></pre></td></tr></table></figure><p> 另外，toLocaleUpperCase()、toLocaleLowerCase()方法按照本地方式把字符串转换为大小写。只有几种语言（如土耳其语）具有地方特有的大小写映射，所有该方法的返回值通常与上面两张方法一样。</p><p><strong>trim()</strong>: 删除字符串首位的空格。该方法只是创建字符串的副本，不会改变原字符串。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"Smile\"</span>;</span><br><span class=\"line\">s.trim();  <span class=\"comment\">//Smile</span></span><br></pre></td></tr></table></figure><h2 id=\"Set\"><a class=\"headerlink\" href=\"#Set\"></a>Set</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>很多时候我们把 Set 叫做 集合, 但是，Set 可以是集合，集合不一定是 Set。</p><p>特性：唯一性 =&gt; 不重复 =&gt; 能够对数据进行去重操作。</p><p>注：集合去重，是全等匹配，===。</p><h3 id=\"创建 Set\"><a class=\"headerlink\" href=\"# 创建 Set\"></a>创建 Set</h3><p>Set 本身是一个构造函数，调用构造函数用来生成 Set 数据结构。　　<br>　　　　关键词　　标识符　= new Set();<br>　　例 　　 let　　　　i　　 = new Set();　　<br>　　Set 函数可以接受一个数组（或类似数组的对象）作为参数，用来进行数据初始化。</p><p>let i = new Set([1, 2, 3, 4, 4]);　　会得到　　set{1, 2, 3, 4,}</p><p>注：如果初始化时给的值有重复的，会自动去除。集合并没有字面量声明方式。</p><h3 id=\"Set 的属性\"><a class=\"headerlink\" href=\"#Set 的属性\"></a>Set 的属性 </h3><p> 常用的属性就一个：size 　　返回 Set 实例的成员总数。</p><p>let s = new Set([1, 2, 3]);</p><p>console.log(s.size); // 3</p><h3 id=\"Set 的方法\"><a class=\"headerlink\" href=\"#Set 的方法\"></a>Set 的方法 </h3><p>Set 实例的方法分为两大类：操作方法（用于数据操作）和遍历方法（用于遍历数据）。</p><h3 id=\"操作方法\"><a class=\"headerlink\" href=\"# 操作方法\"></a> 操作方法:</h3><table><thead><tr><th>add(value)</th><th>添加数据，并返回新的 Set 结构 </th></tr></thead><tbody><tr><td>delete(value)</td><td> 删除数据，返回一个布尔值，表示是否删除成功 </td></tr><tr><td>has(value)</td><td> 查看是否存在某个数据，返回一个布尔值 </td></tr><tr><td>clear()</td><td> 清除所有数据，没有返回值 </td></tr></tbody></table><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set([1, 2, 3, 4, 4]);</span><br><span class=\"line\">// 添加数据 5</span><br><span class=\"line\">let addSet = <span class=\"keyword\">set</span>.add(5);</span><br><span class=\"line\">console.log(addSet); // Set(5) &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除数据 4s</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delSet = <span class=\"keyword\">set</span>.delete(4);</span><br><span class=\"line\">console.log(delSet); // true</span><br><span class=\"line\">// 查看是否存在数据 4</span><br><span class=\"line\">let hasSet = <span class=\"keyword\">set</span>.has(4);</span><br><span class=\"line\">console.log(hasSet); // false</span><br><span class=\"line\">// 清除所有数据</span><br><span class=\"line\"><span class=\"keyword\">set</span>.clear();</span><br><span class=\"line\">console.log(<span class=\"keyword\">set</span>); // Set(0) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id=\"遍历方法\"><a class=\"headerlink\" href=\"# 遍历方法\"></a> 遍历方法 </h3><p>Set 提供了三个遍历器生成函数和一个遍历方法。</p><table><thead><tr><th>values()</th><th> 返回一个键值的遍历器 </th></tr></thead><tbody><tr><td>entries()</td><td> 返回一个键值对的遍历器 </td></tr><tr><td>forEach()</td><td> 使用回调函数遍历每个成员 </td></tr></tbody></table><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> color = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"red\"</span>, <span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> color.keys())&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> color.values())&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> color.entries())&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"red\", \"red\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"green\", \"green\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"blue\", \"blue\"]</span></span><br><span class=\"line\">color.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br></pre></td></tr></table></figure><h3 id=\"与数组相关操作\"><a class=\"headerlink\" href=\"# 与数组相关操作\"></a> 与数组相关操作 </h3><h4 id=\"Set- 转数组：\"><a class=\"headerlink\" href=\"#Set- 转数组：\"></a>Set 转数组：</h4><p> 由于扩展运算符…，内部的原理也是使用的 for-of 循环，所以也可以用于操作 Set 结构。</p><p>例如将 Set 结构转换为数组结构：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let color &#x3D; new Set([&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]);</span><br><span class=\"line\">let colorArr &#x3D; [...color];</span><br></pre></td></tr></table></figure><h4 id=\"数组去重：\"><a class=\"headerlink\" href=\"# 数组去重：\"></a>数组去重：</h4><p>扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"string\">\"2\"</span>,<span class=\"number\">24</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"comment\">//step1: 数组转集合 </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set(arr);// 已经去掉重复值，当前不是数组，而集合　　Set &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'2'</span>, <span class=\"number\">24</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">//step2: 集合转数组</span></span><br><span class=\"line\">arr = [...set];<span class=\"comment\">//[1, 2, '2', 24, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id=\"扩展\"><a class=\"headerlink\" href=\"# 扩展\"></a> 扩展 </h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([...num1,...num2]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(union);<span class=\"comment\">//Set &#123; 1, 2, 3, 4, 5, 6 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> intersect = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(</span><br><span class=\"line\">    [...num1].filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span> num2.has(x))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(intersect); <span class=\"comment\">//Set &#123; 3, 4 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difference = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(</span><br><span class=\"line\">    [...num1].filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !num2.has(x))</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(difference); <span class=\"comment\">//Set &#123; 1, 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id=\"Map：\"><a class=\"headerlink\" href=\"#Map：\"></a>Map：</h2><p>Map 是一组键值对的结构，具有极快的查找速度。</p><p> 举个例子，假设要根据同学的名字查找对应的成绩，如果用 Array 实现，需要两个 Array：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">95</span>, <span class=\"number\">75</span>, <span class=\"number\">85</span>];</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在 names 中找到对应的位置，再从 scores 取出对应的成绩，Array 越长，耗时越长。</p><p>如果用 Map 实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用 JavaScript 写一个 Map 如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'Michael'</span>, <span class=\"number\">95</span>], [<span class=\"string\">'Bob'</span>, <span class=\"number\">75</span>], [<span class=\"string\">'Tracy'</span>, <span class=\"number\">85</span>]]);</span><br><span class=\"line\">m.get(<span class=\"string\">'Michael'</span>); <span class=\"comment\">// 95</span></span><br></pre></td></tr></table></figure><p>初始化 <code>Map</code> 需要一个二维数组，或者直接初始化一个空 <code>Map</code>。<code>Map</code> 具有以下方法：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">// 空 Map</span></span><br><span class=\"line\">m.set(<span class=\"string\">'Adam'</span>, <span class=\"number\">67</span>); <span class=\"comment\">// 添加新的 key-value</span></span><br><span class=\"line\">m.set(<span class=\"string\">'Bob'</span>, <span class=\"number\">59</span>);</span><br><span class=\"line\">m.has(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 是否存在 key 'Adam': true</span></span><br><span class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 67</span></span><br><span class=\"line\">m.delete(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 删除 key 'Adam'</span></span><br><span class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure><p>由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">m.set(<span class=\"string\">'Adam'</span>, <span class=\"number\">67</span>);</span><br><span class=\"line\">m.set(<span class=\"string\">'Adam'</span>, <span class=\"number\">88</span>);</span><br><span class=\"line\">m.get(<span class=\"string\">'Adam'</span>); <span class=\"comment\">// 88</span></span><br></pre></td></tr></table></figure>","url":"/posts/10347/","min2read":15,"word4post":"3.6k","prev_post":{"title":"数据结构之基础","url":"/posts/46208/"},"next_post":{"title":"HTML5 标签大全","url":"/posts/15479/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Array 对象\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">Array 对象 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"创建 Array 对象的语法\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 创建 Array 对象的语法 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"返回值\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">返回值 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Array- 对象属性\" href = \"#\"><span class=\"toc-number\">1.3.</span> <span class=\"toc-text\">Array 对象属性 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"constructor\" href = \"#\"><span class=\"toc-number\">1.3.1.</span> <span class=\"toc-text\">constructor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" data-id=\"定义和用法\" href = \"#\"><span class=\"toc-number\">1.3.1.1.</span> <span class=\"toc-text\"> 定义和用法 </span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" data-id=\"语法\" href = \"#\"><span class=\"toc-number\">1.3.1.2.</span> <span class=\"toc-text\"> 语法 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Array- 对象方法\" href = \"#\"><span class=\"toc-number\">1.4.</span> <span class=\"toc-text\">Array 对象方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"String 对象\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">String 对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Set\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"创建 Set\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\">创建 Set</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Set 的属性\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\">Set 的属性 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Set 的方法\" href = \"#\"><span class=\"toc-number\">3.3.</span> <span class=\"toc-text\">Set 的方法 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"操作方法\" href = \"#\"><span class=\"toc-number\">3.4.</span> <span class=\"toc-text\"> 操作方法:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"遍历方法\" href = \"#\"><span class=\"toc-number\">3.5.</span> <span class=\"toc-text\"> 遍历方法 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"与数组相关操作\" href = \"#\"><span class=\"toc-number\">3.6.</span> <span class=\"toc-text\"> 与数组相关操作 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"Set- 转数组：\" href = \"#\"><span class=\"toc-number\">3.6.1.</span> <span class=\"toc-text\">Set 转数组：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"数组去重：\" href = \"#\"><span class=\"toc-number\">3.6.2.</span> <span class=\"toc-text\">数组去重：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"扩展\" href = \"#\"><span class=\"toc-number\">3.6.3.</span> <span class=\"toc-text\"> 扩展 </span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"Map：\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">Map：</span></a></li></ol>","categories":[{"name":"学习总结","path":"api/categories/学习总结.json","url":"/categories/学习总结/"}],"tags":[{"name":"js对象","path":"api/tags/js对象.json","url":"/tags/js对象/"}]}