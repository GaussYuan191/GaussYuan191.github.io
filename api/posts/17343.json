{"title":"leetcode- 重新学动态规划","slug":"leetcode-重新学动态规划","date":"2021-09-22","updated":"2021-09-22","comments":true,"path":"api/posts/17343.json","excerpt":"<p> 最近在刷动态规划的题目 ，决定重新整理一下关于动态规划的知识 </p>","cover":null,"covers":null,"content":"<p>最近在刷动态规划的题目 ，决定重新整理一下关于动态规划的知识 </p><a id=\"more\"></a><h2 id=\"什么是动态规划\"><a class=\"headerlink\" href=\"# 什么是动态规划\"></a> 什么是动态规划 </h2><p> 动态规划，英文：Dynamic Programming，简称 DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>所以动态规划中每一个状态一定是由上一个状态推导出来的，<strong>这一点就区分于贪心 </strong>，贪心没有状态推导，而是从局部直接选最优的，</p><h2 id=\"动态规划的解题步骤\"><a class=\"headerlink\" href=\"# 动态规划的解题步骤\"></a> 动态规划的解题步骤 </h2><ol><li> 确定 dp 数组（dp table）以及下标的含义 </li><li> 确定递推公式 </li><li>dp 数组如何初始化</li><li> 确定遍历顺序 </li><li> 举例推导 dp 数组 </li></ol><h2 id=\"实战\"><a class=\"headerlink\" href=\"# 实战\"></a> 实战 </h2><h3 id=\"打家劫舍\"><a class=\"headerlink\" href=\"# 打家劫舍\"></a> 打家劫舍 </h3><p><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"> 力扣题目链接 </a></p><p> 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例：</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。</span><br><span class=\"line\">     偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</span><br><span class=\"line\">输入：[2,7,9,3,1]</span><br><span class=\"line\">输出：12</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。</span><br><span class=\"line\">     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>1. 确定 dp 数组，这里我们可以设 dp[i]表示 i 间房偷窃的最高金额 </p><p>2. 由题意可知偷第 i 间房可得 dp[i] = dp[i - 2] + nums[i], 偷 i - 1 间房(<strong> 重点是偷 i- 1 间房，应为不能连着偷，即不偷 i 间房 </strong>) 可得 dp[i] = dp[i - 1]</p><p>3. 由题意可知 dp[0] = nums[0], dp[1] = max(nums[0], nums[1])</p><p>4. 由 2 可知是从前往后遍历的 </p><p>5. 输入[2,7,9,3,1]</p><p>dp[i] = [2,7,11,11,12]</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dp = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len === <span class=\"number\">1</span> ? nums[<span class=\"number\">0</span>] : <span class=\"built_in\">Math</span>.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"built_in\">Math</span>.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">Math</span>.max(dp[i - <span class=\"number\">2</span>] + nums[i], dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[nums.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 压缩一下 可以用三个变量代替</span></span><br></pre></td></tr></table></figure><h3 id=\"打家劫舍 II\"><a class=\"headerlink\" href=\"# 打家劫舍 II\"></a> 打家劫舍 II</h3><p><a href=\"https://leetcode-cn.com/problems/house-robber-ii/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">力扣题目链接 </a></p><p> 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p><p><strong>示例：</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [2,3,2]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：你不能先偷窃 1 号房屋（金额 &#x3D; 2），然后偷窃 3 号房屋（金额 &#x3D; 2）, 因为他们是相邻的。</span><br><span class=\"line\">输入：nums &#x3D; [1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：你可以先偷窃 1 号房屋（金额 &#x3D; 1），然后偷窃 3 号房屋（金额 &#x3D; 3）。</span><br><span class=\"line\">     偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</span><br></pre></td></tr></table></figure><p><strong>分析 </strong></p><p> 本题和上题的区别就是首尾不能同时选，所以只考虑包含头或者尾的情况。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len == <span class=\"number\">1</span> ? nums[<span class=\"number\">0</span>] : <span class=\"built_in\">Math</span>.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> robs = <span class=\"function\">(<span class=\"params\">(i, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> a = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"built_in\">Math</span>.max(nums[i], nums[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j - i &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> j - i == <span class=\"number\">1</span> ? a : b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = i + <span class=\"number\">2</span>; k &lt; j; k++) &#123;</span><br><span class=\"line\">            res = <span class=\"built_in\">Math</span>.max(a + nums[k], b);</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans1 = robs(<span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans2 = robs(<span class=\"number\">1</span>, len);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans1 &gt; ans2 ? ans1 : ans2; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"337- 打家劫舍 -III\"><a class=\"headerlink\" href=\"#337- 打家劫舍 -III\"></a>337. 打家劫舍 III</h2><p><a href=\"https://leetcode-cn.com/problems/house-robber-iii/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">力扣题目链接 </a></p><p> 给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例:</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,2,3,null,3,null,1]</span><br><span class=\"line\"></span><br><span class=\"line\">     3</span><br><span class=\"line\">    &#x2F; \\</span><br><span class=\"line\">   2   3</span><br><span class=\"line\">    \\   \\ </span><br><span class=\"line\">     3   1</span><br><span class=\"line\"></span><br><span class=\"line\">输出: 7 </span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 &#x3D; 3 + 3 + 1 &#x3D; 7.</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [3,4,5,1,3,null,1]</span><br><span class=\"line\"></span><br><span class=\"line\">     3</span><br><span class=\"line\">    &#x2F; \\</span><br><span class=\"line\">   4   5</span><br><span class=\"line\">  &#x2F; \\   \\ </span><br><span class=\"line\"> 1   3   1</span><br><span class=\"line\"></span><br><span class=\"line\">输出: 9</span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 &#x3D; 4 + 5 &#x3D; 9.</span><br></pre></td></tr></table></figure><p><strong>分析 </strong><br>1. 由题可知每个结点有两种状态[偷，不偷]</p><p>val1 表示偷该结点盗取最大的值，val2 表示不偷该结点盗取最大的值</p><p>2. 偷该结点则不偷儿子结点 val1 = val + left[1] + right[1]</p><p> 不偷该结点则为两个儿子结点两种状态的最大值的和</p><p>val2 = max(left[0], left[1]) + max(right[0], right[1])</p><p>3. 偷的结点是空 则返回 [0, 0]</p><p>4. 由上可知由儿子结点推父结点则采用后续遍历</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> left = dfs(node.left);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> right = dfs(node.right);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> val1 = node.val + left[<span class=\"number\">1</span>] + right[<span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"keyword\">let</span> val2 = <span class=\"built_in\">Math</span>.max(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + <span class=\"built_in\">Math</span>.max(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>]);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> [val1, val2]; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> ans = dfs(root);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...ans);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","url":"/posts/17343/","min2read":5,"word4post":"1.4k","prev_post":{"title":"闲聊","url":"/posts/16446/"},"next_post":{"title":"CSS 画一个月饼","url":"/posts/4214/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"什么是动态规划\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 什么是动态规划 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"动态规划的解题步骤\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 动态规划的解题步骤 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"实战\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\"> 实战 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"打家劫舍\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 打家劫舍 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"打家劫舍 II\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\"> 打家劫舍 II</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"337- 打家劫舍 -III\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\">337. 打家劫舍 III</span></a></li></ol>","categories":[{"name":"刷题","path":"api/categories/刷题.json","url":"/categories/刷题/"}],"tags":[{"name":"动态规划","path":"api/tags/动态规划.json","url":"/tags/动态规划/"}]}