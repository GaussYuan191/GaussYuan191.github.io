{"title":"面试题","slug":"面试题","date":"2021-10-01","updated":"2021-10-01","comments":true,"path":"api/posts/27055.json","excerpt":"<p> 总结一下现在做过的面试题 </p>","cover":"/gallery/vue-life.webp","covers":["/gallery/vue-life.webp"],"content":"<p>总结一下现在做过的面试题 </p><a id=\"more\"></a><h2 id=\"公司介绍\"><a class=\"headerlink\" href=\"# 公司介绍\"></a> 公司介绍 </h2><h3 id=\"深信服\"><a class=\"headerlink\" href=\"# 深信服\"></a> 深信服 </h3><p> 深信服是一家专注于企业级网络安全、云计算、IT 基础设施与物联网的产品和服务供应商 </p><h2 id=\"笔试题\"><a class=\"headerlink\" href=\"# 笔试题\"></a> 笔试题 </h2><p>1. 本地存储了解多少</p><p> 答:cookie、localStorage、sessionStorage、indexedDB</p><p>cookie、localStorage、sessionStorage 异同 </p><table><thead><tr><th> 特性 </th><th>Cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td> 数据的生命期 </td><td> 一般由服务器生成，可设置失效时间。如果在浏览器端生成 Cookie，默认是关闭浏览器后失效 </td><td> 除非被清除，否则永久保存 </td><td> 仅在当前会话下有效，关闭页面或浏览器后被清除 </td></tr><tr><td> 存放数据大小 </td><td>4K 左右</td><td> 一般为 5MB</td><td>一般为 5MB</td></tr><tr><td>与服务器端通信 </td><td> 每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题 </td><td> 仅在客户端（即浏览器）中保存，不参与和服务器的通信 </td><td> 仅在客户端（即浏览器）中保存，不参与和服务器的通信 </td></tr><tr><td> 易用性 </td><td> 需要程序员自己封装，源生的 Cookie 接口不友好 </td><td> 源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持 </td><td> 源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持 </td></tr></tbody></table><p>indexedDB 的特点</p><p><strong>（1）键值对储存。</strong> IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以 &quot; 键值对 &quot; 的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p><p><strong>（2）异步。</strong> IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。</p><p><strong>（3）支持事务。</strong> IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</p><p><strong>（4）同源限制</strong> IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</p><p><strong>（5）储存空间大</strong> IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</p><p><strong>（6）支持二进制储存。</strong> IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</p><p>2.XSS 与 CSRF 攻击了解多少，了解其他攻击吗？</p><p>XSS：<strong> 跨站脚本攻击 </strong>（Cross-site scripting，通常简称为 XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及用户端脚本语言。</p><p>CSRF:<strong> 跨站请求伪造 </strong>（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。</p><p> 参考:<a href=\"https://www.cnblogs.com/itsuibi/p/10752868.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">https://www.cnblogs.com/itsuibi/p/10752868.html</a></p><p>3. 对跨域的了解，JSONP 的原理，src 为什么能跨域 </p><p> 跨域是浏览器本身施加的安全限制，浏览器的同源策略决定了一个网站不可以执行非本网站下的脚本，浏览器的同源策略，即指网站域名，请求协议，服务端口均相同 </p><p>JSONP 的原理：其本质是利用了标签具有可跨域的特性，由服务端返回预先定义好的 javascript 函数的调用，并且将服务端数据以该函数参数的形式传递过来。</p><p>** 原理:**script img link 获取资源不受浏览器同源策略限制</p><p>4. 伪类与伪元素的区别</p><p> 伪类，更多的定义的是状态。常见的伪类有 :hover，:active，:focus，:visited，:link，:not，:first-child，:last-child 等等。</p><p>伪元素，不存在于 DOM 树中的虚拟元素，它们可以像正常的 html 元素一样定义 css，但无法使用 JavaScript 获取。常见伪元素有 ::before，::after，::first-letter，::first-line 等等。</p><p>CSS3 明确规定了，伪类用一个冒号 (:) 来表示，而伪元素则用两个冒号 (::) 来表示。但目前因为兼容性的问题，它们的写法可以是一致的，都用一个冒号 (:) 就可以了，所以非常容易混淆。</p><p>参考链接：<a href=\"https://segmentfault.com/a/1190000017784553\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">https://segmentfault.com/a/1190000017784553</a></p><p>5. 请说一下 Vue 的生命周期？</p><p>初始化阶段：为 Vue 实例初始化一些事件、属性和响应式数据等 </p><p> 模板编译阶段：把我们写的 <code>&lt;template&gt;&lt;/template&gt;</code> 模板编译成渲染函数 <code>render</code></p><p>挂载阶段：把模板渲染到真实的 DOM 节点上，以及数据变更时执行更新操作 </p><p> 销毁阶段：把组件实例从父组件中删除，并取消依赖监听和事件监听 </p><p><img src=\"/gallery/vue-life.webp\" alt=\"\"></p><p>6.Git 常用的命令</p><h1 id=\"git-init：仓库的初始化；git-status：查看当前仓库的状态；git-diff：查看仓库与上次修改的内容；git-add：将文件添加至暂存区；git-commit：提交代码；git-clone：克隆代码；-HEADgit-branch：查看当前分支；\"><a class=\"headerlink\"href=\"#git-init：仓库的初始化；git-status：查看当前仓库的状态；git-diff：查看仓库与上次修改的内容；git-add：将文件添加至暂存区；git-commit：提交代码；git-clone：克隆代码；-HEADgit-branch：查看当前分支；\"></a>git init：仓库的初始化；<br>git status：查看当前仓库的状态；<br>git diff：查看仓库与上次修改的内容；<br>git add：将文件添加至暂存区；<br>git commit：提交代码；<br>git clone：克隆代码；<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>git branch：查看当前分支；</h1><p>git bransh：查看当前分支；</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>c728d66bef1038018a91f5229f0ef8f72309e64f<br>git checkout：切换当前分支；<br>7. 怎样提高代码的质量</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>1. 谨慎命名，取名清晰，避免误导</p><p>2. 函数和类都应该 坚持单一权责原则</p><p>3. 写好注释</p><p>4. 良好的代码格式</p><p>5. 有错误处理</p><p>8.nextTick 有了解吗？</p><p>：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p><p> 它的应用场景有哪些？</p><p>：在数据变化之后要执行的某个操作，而这个操作需要使用随数据改变而改变的 DOM 结构的时候，这个操作都应该放进 Vue.nextTick()的回调函数中 </p><p>9. 事件循环是什么？宏任务和微任务都有哪些？</p><p>JS 的代码执行是基于一种事件循环的机制</p><p>JS 中有两种任务类型：<strong> 微任务 </strong>（microtask）和<strong> 宏任务 </strong>（macrotask），在 ES6 中，microtask 称为 jobs，macrotask 称为 task。</p><p><strong> 宏任务 </strong>： script （主代码块）、<code>setTimeout</code> 、<code>setInterval</code> 、<code>setImmediate</code> 、I/O 、UI rendering</p><p><strong> 微任务 </strong>：<code>process.nextTick</code>（Nodejs） 、<code>promise</code> 、<code>Object.observe</code> 、<code>MutationObserver</code></p><p>10. 防抖和节流，定义及适用场景</p><p> 防抖：文本编译器实时保存、登陆发送短信验证码等按钮避免用户点击太快、调整浏览器窗口大小 </p><p> 实际使用：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit-btn\"</span>&gt;</span>提交 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"submit\"</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> timerId = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        if (timerId) &#123;</span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">window</span>.clearTimeout(timerId);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        timerId = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          fn.apply(<span class=\"keyword\">this</span>, args);</span></span><br><span class=\"line\"><span class=\"actionscript\">          timerId = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> btnDebounce = debounce(submit, <span class=\"number\">1000</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"submit-btn\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    btn.addEventListener(<span class=\"string\">\"click\"</span>, btnDebounce);</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 节流：滚动加载、搜索 <a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E8%81%94%E6%83%B3\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\"> 联想 </a> 功能、浏览器播放事件 </p><p> 实际使用 </p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span> 节流 <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"submit-btn\"</span>&gt;</span> 提交 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"submit\"</span>);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> throttle = <span class=\"function\">(<span class=\"params\">fn, delay</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> canUse = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        if (canUse) &#123;</span><br><span class=\"line\"><span class=\"actionscript\">          fn.apply(<span class=\"keyword\">this</span>, args);</span></span><br><span class=\"line\"><span class=\"actionscript\">          canUse = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (canUse = <span class=\"literal\">true</span>), delay);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 间隔设为 3 秒，效果比较明显</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> btnThrottle = throttle(submit, <span class=\"number\">3000</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"submit-btn\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    btn.addEventListener(<span class=\"string\">\"click\"</span>, btnThrottle);</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>11. 服务端渲染和客服端渲染</p><p> 客户端渲染：客户端渲染模式下，服务端把渲染的静态文件给到客户端，客户端拿到服务端发送过来的文件自己跑一遍 js，根据 JS 运行结果，生成相应 DOM，然后渲染给用户。</p><p>服务端渲染：服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。使用服务端渲染的网站，可以说是“所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。<br>参考：<a href=\"https://blog.csdn.net/guoshujie1/article/details/89884080\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://blog.csdn.net/guoshujie1/article/details/89884080</a></p><p>12 css3 的新特性 </p><p>CSS3 中新添加了很多选择器，Transform 和 Animation，新的边框属性 border-radius 圆角 ，border-image 边框图片，box-shadow 阴影，渐变 linear-gradient(线性渐变) 和 radial-gradient(径向渐变)</p><p>13 webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全 </p><ul><li> 初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li><li>确定入口：根据配置中的 entry 找出所有的入口文件；</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li><li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ul><p>14.Vue-router 相关的问题</p><p><a href=\"https://www.cnblogs.com/qwer123dsada/p/14709952.html\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">https://www.cnblogs.com/qwer123dsada/p/14709952.html</a></p><p>15. 深拷贝</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个深拷贝函数  接收目标 target 参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前需要深拷贝的是一个对象的话</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是一个数组的话</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(target)) &#123;</span><br><span class=\"line\">            result = []; <span class=\"comment\">// 将 result 赋值为一个数组，并且执行遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 递归克隆数组中的每一项</span></span><br><span class=\"line\">                result.push(deepClone(target[i]))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         <span class=\"comment\">// 判断如果当前的值是 null 的话；直接赋值为 null</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target===<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">         <span class=\"comment\">// 判断如果当前的值是一个 RegExp 对象的话，直接赋值    </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target.constructor===<span class=\"built_in\">RegExp</span>)&#123;</span><br><span class=\"line\">            result = target;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 否则是普通对象，直接 for in 循环，递归赋值对象的所有值</span></span><br><span class=\"line\">            result = &#123;&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">                result[i] = deepClone(target[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 返回最终结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>16. 介绍一下项目</p>","url":"/posts/27055/","min2read":11,"word4post":"2.9k","prev_post":{"title":"笔试题总结","url":"/posts/771/"},"next_post":{"title":"面试总结 9.24","url":"/posts/54740/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"公司介绍\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 公司介绍 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"深信服\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 深信服 </span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"笔试题\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 笔试题 </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"git-init：仓库的初始化；git-status：查看当前仓库的状态；git-diff：查看仓库与上次修改的内容；git-add：将文件添加至暂存区；git-commit：提交代码；git-clone：克隆代码；-HEADgit-branch：查看当前分支；\" href = \"#\"><span class=\"toc-number\"></span> <span class=\"toc-text\">git init：仓库的初始化；\ngit status：查看当前仓库的状态；\ngit diff：查看仓库与上次修改的内容；\ngit add：将文件添加至暂存区；\ngit commit：提交代码；\ngit clone：克隆代码；\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\ngit branch：查看当前分支；</span></a>","categories":[{"name":"面试题","path":"api/categories/面试题.json","url":"/categories/面试题/"}],"tags":[{"name":"面试题","path":"api/tags/面试题.json","url":"/tags/面试题/"}]}