{"title":"ts 学习笔记 1","slug":"ts学习笔记1","date":"2022-09-07","updated":"2022-09-07","comments":true,"path":"api/posts/61000.json","excerpt":null,"cover":null,"covers":null,"content":"<a id=\"more\"></a><p>整理一下最近学的 ts 知识 </p><h2 id=\"对比原理\"><a class=\"headerlink\" href=\"# 对比原理\"></a> 对比原理 </h2><ul><li> 他是 JavaScript 的一个超集，在原有的基础上，添加了可选静态类型和基于类的面向对象编程方式 </li></ul><h2 id=\"TS 的使用场景\"><a class=\"headerlink\" href=\"#TS 的使用场景\"></a>TS 的使用场景</h2><ul><li> 面向项目 </li></ul><p>TS - 面向解决大型复杂项目，复杂架构以及代码维护场景</p><p>JS - 脚本化语言，用于面向简单页面场景</p><ul><li><p> 自主检测 <br>TS - 编译期间，主动发现并指出错误<br>JS - 无编译阶段</p></li><li><p> 类型检测 <br>TS - 强类型<br>JS - 弱类型</p></li><li><p> 运行流程 <br>TS - 依赖编译，依靠编译打包后，编译成 JS<br>JS - 可以直接运行与浏览器中</p></li><li><p> 复杂特性 <br>TS - 模块化、泛型、接口</p></li></ul><p> 考点：ts 相较于 js 优势 功能 =&gt; 以上 4 个点，ts 如何实现这个功能 =&gt; 多了编译时 =&gt; ts 官方编译器 / babel</p><h2 id=\"TS 的基础类型与写法\"><a class=\"headerlink\" href=\"#TS 的基础类型与写法\"></a>TS 的基础类型与写法 </h2><h3 id=\"布尔值 -boolean\"><a class=\"headerlink\" href=\"# 布尔值 -boolean\"></a> 布尔值 (boolean)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let idDone: boolean &#x3D; false</span><br></pre></td></tr></table></figure><h3 id=\"枚举 -enmu\"><a class=\"headerlink\" href=\"# 枚举 -enmu\"></a> 枚举 (enmu)</h3><p>enum 类型是对 JavaScript 的标准类型的一个补充</p><ul><li> 数字类型枚举，默认情况下，从 0 开始为元素编号，依次递增，也可以手动指定成员的数值 </li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Score &#123;</span><br><span class=\"line\">    BAD,</span><br><span class=\"line\">    NG,</span><br><span class=\"line\">    GOOD &#x3D; 4,</span><br><span class=\"line\">    PERFET</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li> 字符串类型枚举, 有值取值 </li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Score &#123;</span><br><span class=\"line\">    BAD &#x3D; &quot;BAD&quot;,</span><br><span class=\"line\">    NG &#x3D; &quot;NG&quot;,</span><br><span class=\"line\">    GOOD &#x3D; &quot;GOOD&quot;,</span><br><span class=\"line\">    PERFET &#x3D; &quot;PERFET&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li> 反向映射 - 正反向双重 mapping</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Score &#123;</span><br><span class=\"line\">    BAD,</span><br><span class=\"line\">    NG,</span><br><span class=\"line\">    GOOD,</span><br><span class=\"line\">    PERFET</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>异构类型 </li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum ENUM &#123;</span><br><span class=\"line\">    A,</span><br><span class=\"line\">    B,</span><br><span class=\"line\">    C &#x3D; &quot;C&quot;,</span><br><span class=\"line\">    D &#x3D; &quot;D&quot;,</span><br><span class=\"line\">    E &#x3D; &quot;6&quot;,</span><br><span class=\"line\">    F</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"数字 -number\"><a class=\"headerlink\" href=\"# 数字 -number\"></a> 数字 (number)</h3><p> 和 JavaScript 一样，TypeScirpt 里所有的数字都是浮点数，<code>0b1010</code>和 <code>0o744</code> 在 ES6 中会被编译成十进制数字 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> decLiteral: number = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hexLiteral: number = <span class=\"number\">0o744</span></span><br></pre></td></tr></table></figure><h4 id=\"元组\"><a class=\"headerlink\" href=\"# 元组\"></a> 元组 </h4><h3 id=\"字符串 -string\"><a class=\"headerlink\" href=\"# 字符串 -string\"></a> 字符串 (string)</h3><p> 使用 <code>string</code> 定义字符串类型：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myName: string = <span class=\"string\">'Tom'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sentence: string = <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;myName&#125;</span>`</span></span><br></pre></td></tr></table></figure><h3 id=\"空值 -void\"><a class=\"headerlink\" href=\"# 空值 -void\"></a>空值 (void)</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用<code>void</code> 表示没有任何返回值的函数 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alterName</span>(<span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    alter(<span class=\"string\">'My name is Tom'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"Null 和 Undefined\"><a class=\"headerlink\" href=\"#Null 和 Undefined\"></a>Null 和 Undefined</h3><p> 与<code>void</code>的区别是，<code>undefined</code>和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code></p><p> 类型的变量，而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num: number = u;</span><br><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num:number = u </span><br><span class=\"line\"><span class=\"comment\">// Type 'void' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><h3 id=\"any 和 unknown、never\"><a class=\"headerlink\" href=\"#any 和 unknown、never\"></a>any 和 unknown、never</h3><p>1.<code>any</code> 绕过所有类型检查 =&gt; 类型检测和编译筛查功能全部取消。2.<code>unknown</code> 绕过赋值检查 =&gt; 禁止更改传递 </p><h4 id=\"Object-ObjectConstructor\"><a class=\"headerlink\" href=\"#Object-ObjectConstructor\"></a>Object / ObjectConstructor / {}</h4><p><code>Object</code> -&gt; Object.prototype 上的属性，<code>ObjectConstructor</code>-&gt; 定义了 Object 本身的属性, <code>{}</code>- 定义空属性</p><h2 id=\"接口 -interface\"><a class=\"headerlink\" href=\"# 接口 -interface\"></a> 接口 (interface)</h2><p> 他是对行为的一种抽象，具体行动由类去实现 </p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;  &#x2F;&#x2F; 只读</span><br><span class=\"line\">    name: string,</span><br><span class=\"line\">    age?: number， &#x2F;&#x2F; 可选</span><br><span class=\"line\">    [propName: string]: any &#x2F;&#x2F; 任意</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let tom:Person &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;Tom&#39;,</span><br><span class=\"line\">    age: 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"交叉类型\"><a class=\"headerlink\" href=\"# 交叉类型\"></a> 交叉类型 </h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface A &#123;</span><br><span class=\"line\">  x: D;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface B &#123;</span><br><span class=\"line\">  x: E;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface C &#123;</span><br><span class=\"line\">  x: F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface D &#123;</span><br><span class=\"line\">  d: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface E &#123;</span><br><span class=\"line\">  e: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface F &#123;</span><br><span class=\"line\">  f: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type ABC &#x3D; A &amp; B &amp; C;</span><br><span class=\"line\">let abc: ABC &#x3D; &#123;</span><br><span class=\"line\">  x: &#123;</span><br><span class=\"line\">    d: false,</span><br><span class=\"line\">    e: &quot;class&quot;,</span><br><span class=\"line\">    f: 5,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p> 合并冲突</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","url":"/posts/61000/","min2read":3,"word4post":776,"prev_post":{"title":"'一次 vue 项目的性能优化'","url":"/posts/27490/"},"next_post":{"title":"1 前端面试准备的副本","url":"/posts/6872/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"对比原理\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\"> 对比原理 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"TS 的使用场景\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">TS 的使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"TS 的基础类型与写法\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">TS 的基础类型与写法 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"布尔值 -boolean\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\"> 布尔值 (boolean)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"枚举 -enmu\" href = \"#\"><span class=\"toc-number\">3.2.</span> <span class=\"toc-text\"> 枚举 (enmu)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"数字 -number\" href = \"#\"><span class=\"toc-number\">3.3.</span> <span class=\"toc-text\"> 数字 (number)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"元组\" href = \"#\"><span class=\"toc-number\">3.3.1.</span> <span class=\"toc-text\"> 元组 </span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"字符串 -string\" href = \"#\"><span class=\"toc-number\">3.4.</span> <span class=\"toc-text\"> 字符串 (string)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"空值 -void\" href = \"#\"><span class=\"toc-number\">3.5.</span> <span class=\"toc-text\">空值 (void)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"Null 和 Undefined\" href = \"#\"><span class=\"toc-number\">3.6.</span> <span class=\"toc-text\">Null 和 Undefined</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"any 和 unknown、never\" href = \"#\"><span class=\"toc-number\">3.7.</span> <span class=\"toc-text\">any 和 unknown、never</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" data-id=\"Object-ObjectConstructor\" href = \"#\"><span class=\"toc-number\">3.7.1.</span> <span class=\"toc-text\">Object &#x2F; ObjectConstructor &#x2F; {}</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"接口 -interface\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\"> 接口 (interface)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"交叉类型\" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\"> 交叉类型 </span></a></li></ol></li></ol>","categories":[{"name":"typescript","path":"api/categories/typescript.json","url":"/categories/typescript/"}],"tags":[{"name":"学习笔记","path":"api/tags/学习笔记.json","url":"/tags/学习笔记/"}]}