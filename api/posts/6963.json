{"title":"工程合并优化","slug":"工程合并优化","date":"2022-11-14","updated":"2022-11-14","comments":true,"path":"api/posts/6963.json","excerpt":null,"cover":"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png","covers":["E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png"],"content":"<a id=\"more\"></a><h2 id=\"背景\"><a class=\"headerlink\" href=\"# 背景\"></a>背景 </h2><p>​ 前端的公共组件保存在 8 个项目的本地，如果要改动公共组件代码，则需要同步到 8 个项目的公共组件，非常麻烦。前端需要进行换肤，需要统一页面样式。</p><h2 id=\"解决措施\"><a class=\"headerlink\" href=\"# 解决措施\"></a> 解决措施 </h2><p>1. 合并前端代码（×）</p><p>​ 核心问题就是 8 个项目都有自己的前端公共组件，如果 8 个工程的前端业务代码和前端公共组件代码合并，这样修改公共组件的代码就不需要同步到其他项目了，但是前后端代码是一起的，如果前端代码都放到一起，则后端代码也要放一起，不符合后端要求的微服务架构。（前端代码本来就不应该放一起，貌似是为了前后端代码在一起，方便打成 jar 包交付客户）</p><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png\" alt=\"\"></p><p>2. 前端代码合并，后端代码不合并（√）</p><p> 新建一个前端仓库，放前端合并的代码，按照前端业务代码分发到不同的业务工程中，这样就实现了前端能实现公共代码统一，也能满足后端微服务架构的要求。</p><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E4%BB%A3%E7%A0%81%E5%88%86%E5%8F%91.png\"alt=\"\"></p><h2 id=\"技术难点\"><a class=\"headerlink\" href=\"# 技术难点\"></a>技术难点 </h2><p>1. 如何与用户交互，可以选择想要同步的业务工程</p><p>2. 在 Windows 上如果操作 git 命令</p><p>3. 如果自动生成提交信息</p><h2 id=\"具体实现\"><a class=\"headerlink\" href=\"# 具体实现\"></a> 具体实现 </h2><p> 使用 node 实现，主要使用的库为 shelljs：用于实现 shell 命令的执行、chalk：颜色插件、inquirer：处理用户交互。具体流程如图。使用 shelljs 执行 git 命令。</p><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E5%88%86%E5%8F%91%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p><h3 id=\" 选择分发工程 \"><a class=\"headerlink\"href=\"# 选择分发工程 \"></a>选择分发工程 </h3><p> 使用 inquirer 处理与用户的交互，用户可以选择分发到全部工程，也可以选择某个工程 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inquirer</span><br><span class=\"line\">  .prompt(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'list'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'selectName'</span>,</span><br><span class=\"line\">        message: colorMap.warn(<span class=\"string\">' 请选择要分发的组件:'</span>),</span><br><span class=\"line\">        choices: [<span class=\"string\">'all-project'</span>, ...Object.values(PROJECTS)],</span><br><span class=\"line\">        pageSize: <span class=\"number\">10</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E9%80%89%E6%8B%A9%E5%88%86%E5%8F%91%E9%A1%B9%E7%9B%AE.png\"alt=\"\"></p><h3 id=\"获取当前分支\"><a class=\"headerlink\" href=\"# 获取当前分支\"></a> 获取当前分支 </h3><p> 使用 git 命令获取当前分支 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> branch = shell.exec(<span class=\"string\">'git branch --show-current'</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;).trim();</span><br></pre></td></tr></table></figure><h3 id=\"重置代码仓库\"><a class=\"headerlink\" href=\"# 重置代码仓库\"></a> 重置代码仓库 </h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(<span class=\"string\">`git reset .`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;);  <span class=\"comment\">//git （--soft，--mixed（默认），--hard）,soft 退回到暂存区，mixed 回退到工作区，hard 则不会保留代码, 这里的作用是回退到工作区</span></span><br><span class=\"line\">shell.exec(<span class=\"string\">`git checkout .`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// 撤销工作区文件</span></span><br><span class=\"line\">shell.exec(<span class=\"string\">`git clean -df`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;);  <span class=\"comment\">// 清除不受 git 控制的文件和文件夹</span></span><br></pre></td></tr></table></figure><h3 id=\"切换本地分支\"><a class=\"headerlink\" href=\"# 切换本地分支\"></a> 切换本地分支 </h3><p> 先检查目标分支本地是否存在 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hasLocalBranch = shell</span><br><span class=\"line\">    .exec(<span class=\"string\">'git branch -l'</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    .stdout.split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.trim().replace(<span class=\"string\">'*'</span>, <span class=\"string\">''</span>))</span><br><span class=\"line\">    .includes(branch);</span><br></pre></td></tr></table></figure><p> 如果不存在，则从远端检出 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(<span class=\"string\">`git fetch`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">shell.exec(<span class=\"string\">`git checkout --track origin/<span class=\"subst\">$&#123;branch&#125;</span>`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure><p> 本地存在则切换分支 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(<span class=\"string\">`git checkout <span class=\"subst\">$&#123;branch&#125;</span>`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id=\" 拉取最新代码 \"><a class=\"headerlink\"href=\"# 拉取最新代码 \"></a> 拉取最新代码 </h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(<span class=\"string\">`git pull origin <span class=\"subst\">$&#123;branch&#125;</span>`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id=\" 更新目标仓库 \"><a class=\"headerlink\"href=\"# 更新目标仓库 \"></a> 更新目标仓库 </h3><p> 同上，但是一般会检测目标仓库有没有本地没有提交的代码 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell.exec(<span class=\"string\">`git status`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id=\" 生成提交信息 \"><a class=\"headerlink\"href=\"# 生成提交信息 \"></a> 生成提交信息 </h3><p> 用 git log 获取提交信息 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = assertShell(</span><br><span class=\"line\">    shell.exec(</span><br><span class=\"line\">        <span class=\"string\">`git log -100 --name-only --format=\"#hash#%H&#123;%cn&#125;[%cd]#message#%s#messageContent#%b#files#\"<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        grepStr ? <span class=\"string\">' --grep=\"'</span> + grepStr + <span class=\"string\">'\"'</span> : <span class=\"string\">''</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        &#125;</span> <span class=\"subst\">$&#123;targetFileName ? <span class=\"string\">' -- '</span> + targetFileName : <span class=\"string\">''</span>&#125;</span>`</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            silent: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p> 利用正则处理提交信息 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// git log 结果转为对象数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> commitList = result.map(<span class=\"function\">(<span class=\"params\">item = <span class=\"string\">''</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commit =</span><br><span class=\"line\">          /(^[0-9a-f]+)\\&#123;(.+)\\&#125;\\[(.+)\\]#message#(.+)#messageContent#([\\s\\S]*)#files#([\\s\\S]*$)/m.exec(</span><br><span class=\"line\">              item</span><br><span class=\"line\">          );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hash: commit[<span class=\"number\">1</span>] || <span class=\"string\">''</span>,</span><br><span class=\"line\">        author: commit[<span class=\"number\">2</span>] || <span class=\"string\">''</span>,</span><br><span class=\"line\">        time: commit[<span class=\"number\">3</span>] || <span class=\"string\">''</span>,</span><br><span class=\"line\">        message: commit[<span class=\"number\">4</span>] || <span class=\"string\">''</span>,</span><br><span class=\"line\">        messageContent: commit[<span class=\"number\">5</span>] || <span class=\"string\">''</span>,</span><br><span class=\"line\">        files: commit[<span class=\"number\">6</span>].trim().split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p> 获取门户工程提交最新 hash，获取门户工程提交历史， 获取业务工程分发记录，判断业务工程分发记录是否记录分发源 hash。根据分发源 hash 在门户工程查找提交记录，如果没有找到则分发失败，找到了则从记录源头之后的提交信息。(在分发之前要确保分发源是否存在，不在则在业务工程手动创建)</p><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E6%9F%A5%E6%89%BE%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95.png\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理生成提交信息 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> portalLatestCommitHash = GitLog(SOURCE)[<span class=\"number\">0</span>].hash; <span class=\"comment\">// 门户工程最新 hash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> commitMessage = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (GenerateMessage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> portalCommitList = GitLog(SOURCE); <span class=\"comment\">// 获取门户工程提交历史</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> projectCommitList = GitLog(TARGET, <span class=\"string\">'delivered from'</span>); <span class=\"comment\">// 获取业务工程分发记录</span></span><br><span class=\"line\">    assertShell(</span><br><span class=\"line\">        &#123; <span class=\"attr\">code</span>: projectCommitList.length &lt; <span class=\"number\">1</span>, <span class=\"attr\">stderr</span>: <span class=\"string\">'未找到有记录分发源 hash 的提交'</span> &#125;,</span><br><span class=\"line\">        <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">' 生成提交信息失败 '</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestDeliverFromHash = (</span><br><span class=\"line\">        projectCommitList[<span class=\"number\">0</span>].messageContent || projectCommitList[<span class=\"number\">0</span>].message</span><br><span class=\"line\">    ).match(<span class=\"regexp\">/(?&lt;=delivered from)[0-9a-f]+/</span>)[<span class=\"number\">0</span>]; <span class=\"comment\">// 上次分发源</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> idx = portalCommitList.findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.hash === latestDeliverFromHash);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        logColor(</span><br><span class=\"line\">            <span class=\"string\">` 合并工程没有需要分发的更新!</span></span><br><span class=\"line\"><span class=\"string\">          工程：<span class=\"subst\">$&#123;projectName&#125;</span> 上次分发源：<span class=\"subst\">$&#123;latestDeliverFromHash&#125;</span>, 合并工程最新提交：<span class=\"subst\">$&#123;portalLatestCommitHash&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"string\">'warn'</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        logColor(<span class=\"string\">` 分发结束: <span class=\"subst\">$&#123;projectName&#125;</span>`</span>, <span class=\"string\">'success'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (idx === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        logColor(</span><br><span class=\"line\">            <span class=\"string\">` 合并工程提交历史中, 无法定位到该分发源, 跳过!</span></span><br><span class=\"line\"><span class=\"string\">          工程：<span class=\"subst\">$&#123;projectName&#125;</span>上次分发源：<span class=\"subst\">$&#123;latestDeliverFromHash&#125;</span>`</span>,</span><br><span class=\"line\">            <span class=\"string\">'warn'</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        logColor(<span class=\"string\">` 分发结束: <span class=\"subst\">$&#123;projectName&#125;</span>`</span>, <span class=\"string\">'success'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><p>根据修改代码文件地址确定要提交的记录, 即修改了 cash 工程的代码，但是分发的工程选的是 settle, 则 cash 修改的记录会被过滤掉 (每个业务工程除了业务代码不同，其他的都相同)</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">portalCommitList = portalCommitList.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filesStr = item.files.join(<span class=\"string\">';'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/Merge branch/</span>.test(item.message)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 自动 merge 的产生的信息</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/frontend\\/(?!src)/</span>.test(filesStr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 改了包含非 src 代码</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/frontend\\/src\\/(?!page)/</span>.test(filesStr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 改了包含非页面代码</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/frontend\\/src\\/page\\/(?!bmtp|dfas)/</span>.test(filesStr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 改了包含非业务页面代码</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (filesStr.includes(<span class=\"string\">`src/page/<span class=\"subst\">$&#123;projectName&#125;</span>`</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 改了该工程页面代码</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\" 分发目标代码 \"><a class=\"headerlink\"href=\"# 分发目标代码 \"></a> 分发目标代码 </h3><p> 删除没有选中的业务目录代码，再将业务工程删除，再复制门户工程到业务工程 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定位到中转仓 page 并删除非目标代码</span></span><br><span class=\"line\">assertShell(shell.cd(path.join(SOURCE, <span class=\"string\">'./src/page'</span>)), <span class=\"string\">''</span>, <span class=\"string\">'找不到 page 页面代码'</span>);</span><br><span class=\"line\">assertShell(</span><br><span class=\"line\">    shell.rm(</span><br><span class=\"line\">        <span class=\"string\">'-Rf'</span>,</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.values(PROJECTS).filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== projectName)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">' 页面代码删除出现错误 '</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定位到业务工程并清除 frontend</span></span><br><span class=\"line\">assertShell(shell.cd(path.join(TARGET, <span class=\"string\">'./frontend'</span>)), <span class=\"string\">''</span>, <span class=\"string\">'找不到 frontend 代码'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> deleteFileList = shell</span><br><span class=\"line\">.ls(<span class=\"string\">'-A'</span>)</span><br><span class=\"line\">.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ![<span class=\"string\">'.vscode'</span>, <span class=\"string\">'node_modules'</span>].includes(item));</span><br><span class=\"line\">assertShell(shell.rm(<span class=\"string\">'-Rf'</span>, deleteFileList), <span class=\"string\">''</span>, <span class=\"string\">' 清空业务工程代码失败 '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码复制</span></span><br><span class=\"line\">assertShell(shell.cp(<span class=\"string\">'-Rf'</span>, SOURCE, TARGET), <span class=\"string\">' 复制更新代码成功 '</span>, <span class=\"string\">' 复制更新代码时出现错误 '</span>);</span><br></pre></td></tr></table></figure><h3 id=\" 创建本地提交 \"><a class=\"headerlink\"href=\"# 创建本地提交 \"></a> 创建本地提交 </h3><p> 通过 git commit 判断是否有提交的文件 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertShell(shell.cd(projectPath), <span class=\"string\">''</span>, <span class=\"string\">'推送分支: 找不到 page 页面代码'</span>);</span><br><span class=\"line\">logColor(<span class=\"string\">` 提交信息:\\n<span class=\"subst\">$&#123;commitMsg&#125;</span>`</span>, <span class=\"string\">'info'</span>);</span><br><span class=\"line\">assertShell(&#123; <span class=\"attr\">code</span>: !commitMsg.length &#125;, <span class=\"string\">''</span>, <span class=\"string\">' 提交信息不可为空 '</span>);</span><br><span class=\"line\">assertShell(shell.exec(<span class=\"string\">`git add .`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\"><span class=\"keyword\">let</span> P = shell.ShellString(commitMsg || <span class=\"string\">' '</span>).exec(<span class=\"string\">`git commit --file -`</span>, &#123; <span class=\"attr\">silent</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (P.code &amp;&amp; P.stdout.indexOf(<span class=\"string\">'up to date'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    logColor(<span class=\"string\">` 没有变更的文件需要提交: <span class=\"subst\">$&#123;projectPath&#125;</span>`</span>, <span class=\"string\">'warn'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertShell(P, <span class=\"string\">''</span>, <span class=\"string\">'提交失败'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"手动提交\"><a class=\"headerlink\" href=\"# 手动提交\"></a> 手动提交</h3><p><img src=\"E:%5CCode%5CBlogCode%5CBlog%5Csource%5Cgallery%5C%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4.png\" alt=\"\"></p>","url":"/posts/6963/","min2read":7,"word4post":"1.7k","prev_post":{"title":"初识乾坤","url":"/posts/59471/"},"next_post":{"title":"'一次 vue 项目的性能优化'","url":"/posts/27490/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"背景\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">背景 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"解决措施\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 解决措施 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"技术难点\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">技术难点 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"具体实现\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\"> 具体实现 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 选择分发工程 \" href = \"#\"><span class=\"toc-number\">4.1.</span> <span class=\"toc-text\">选择分发工程 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"获取当前分支\" href = \"#\"><span class=\"toc-number\">4.2.</span> <span class=\"toc-text\"> 获取当前分支 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"重置代码仓库\" href = \"#\"><span class=\"toc-number\">4.3.</span> <span class=\"toc-text\"> 重置代码仓库 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"切换本地分支\" href = \"#\"><span class=\"toc-number\">4.4.</span> <span class=\"toc-text\"> 切换本地分支 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 拉取最新代码 \" href = \"#\"><span class=\"toc-number\">4.5.</span> <span class=\"toc-text\"> 拉取最新代码 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 更新目标仓库 \" href = \"#\"><span class=\"toc-number\">4.6.</span> <span class=\"toc-text\"> 更新目标仓库 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 生成提交信息 \" href = \"#\"><span class=\"toc-number\">4.7.</span> <span class=\"toc-text\"> 生成提交信息 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 分发目标代码 \" href = \"#\"><span class=\"toc-number\">4.8.</span> <span class=\"toc-text\"> 分发目标代码 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\" 创建本地提交 \" href = \"#\"><span class=\"toc-number\">4.9.</span> <span class=\"toc-text\"> 创建本地提交 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"手动提交\" href = \"#\"><span class=\"toc-number\">4.10.</span> <span class=\"toc-text\"> 手动提交</span></a></li></ol></li></ol>","categories":[],"tags":[]}